
STM32_KEYPAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e20  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08003fb4  08003fb4  00004fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041c8  080041c8  00006018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080041c8  080041c8  000051c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041d0  080041d0  00006018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041d0  080041d0  000051d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080041d4  080041d4  000051d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080041d8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000018  080041f0  00006018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  080041f0  00006174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e88d  00000000  00000000  00006048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c21  00000000  00000000  000148d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  000164f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bbf  00000000  00000000  000173b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000163dc  00000000  00000000  00017f77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109dc  00000000  00000000  0002e353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f634  00000000  00000000  0003ed2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce363  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ffc  00000000  00000000  000ce3a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000d23a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003f9c 	.word	0x08003f9c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	08003f9c 	.word	0x08003f9c

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <__aeabi_uldivmod>:
 80001f8:	b953      	cbnz	r3, 8000210 <__aeabi_uldivmod+0x18>
 80001fa:	b94a      	cbnz	r2, 8000210 <__aeabi_uldivmod+0x18>
 80001fc:	2900      	cmp	r1, #0
 80001fe:	bf08      	it	eq
 8000200:	2800      	cmpeq	r0, #0
 8000202:	bf1c      	itt	ne
 8000204:	f04f 31ff 	movne.w	r1, #4294967295
 8000208:	f04f 30ff 	movne.w	r0, #4294967295
 800020c:	f000 b988 	b.w	8000520 <__aeabi_idiv0>
 8000210:	f1ad 0c08 	sub.w	ip, sp, #8
 8000214:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000218:	f000 f806 	bl	8000228 <__udivmoddi4>
 800021c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000224:	b004      	add	sp, #16
 8000226:	4770      	bx	lr

08000228 <__udivmoddi4>:
 8000228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800022c:	9d08      	ldr	r5, [sp, #32]
 800022e:	468e      	mov	lr, r1
 8000230:	4604      	mov	r4, r0
 8000232:	4688      	mov	r8, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14a      	bne.n	80002ce <__udivmoddi4+0xa6>
 8000238:	428a      	cmp	r2, r1
 800023a:	4617      	mov	r7, r2
 800023c:	d962      	bls.n	8000304 <__udivmoddi4+0xdc>
 800023e:	fab2 f682 	clz	r6, r2
 8000242:	b14e      	cbz	r6, 8000258 <__udivmoddi4+0x30>
 8000244:	f1c6 0320 	rsb	r3, r6, #32
 8000248:	fa01 f806 	lsl.w	r8, r1, r6
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	40b7      	lsls	r7, r6
 8000252:	ea43 0808 	orr.w	r8, r3, r8
 8000256:	40b4      	lsls	r4, r6
 8000258:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800025c:	fa1f fc87 	uxth.w	ip, r7
 8000260:	fbb8 f1fe 	udiv	r1, r8, lr
 8000264:	0c23      	lsrs	r3, r4, #16
 8000266:	fb0e 8811 	mls	r8, lr, r1, r8
 800026a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800026e:	fb01 f20c 	mul.w	r2, r1, ip
 8000272:	429a      	cmp	r2, r3
 8000274:	d909      	bls.n	800028a <__udivmoddi4+0x62>
 8000276:	18fb      	adds	r3, r7, r3
 8000278:	f101 30ff 	add.w	r0, r1, #4294967295
 800027c:	f080 80ea 	bcs.w	8000454 <__udivmoddi4+0x22c>
 8000280:	429a      	cmp	r2, r3
 8000282:	f240 80e7 	bls.w	8000454 <__udivmoddi4+0x22c>
 8000286:	3902      	subs	r1, #2
 8000288:	443b      	add	r3, r7
 800028a:	1a9a      	subs	r2, r3, r2
 800028c:	b2a3      	uxth	r3, r4
 800028e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000292:	fb0e 2210 	mls	r2, lr, r0, r2
 8000296:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800029a:	fb00 fc0c 	mul.w	ip, r0, ip
 800029e:	459c      	cmp	ip, r3
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0x8e>
 80002a2:	18fb      	adds	r3, r7, r3
 80002a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a8:	f080 80d6 	bcs.w	8000458 <__udivmoddi4+0x230>
 80002ac:	459c      	cmp	ip, r3
 80002ae:	f240 80d3 	bls.w	8000458 <__udivmoddi4+0x230>
 80002b2:	443b      	add	r3, r7
 80002b4:	3802      	subs	r0, #2
 80002b6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ba:	eba3 030c 	sub.w	r3, r3, ip
 80002be:	2100      	movs	r1, #0
 80002c0:	b11d      	cbz	r5, 80002ca <__udivmoddi4+0xa2>
 80002c2:	40f3      	lsrs	r3, r6
 80002c4:	2200      	movs	r2, #0
 80002c6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d905      	bls.n	80002de <__udivmoddi4+0xb6>
 80002d2:	b10d      	cbz	r5, 80002d8 <__udivmoddi4+0xb0>
 80002d4:	e9c5 0100 	strd	r0, r1, [r5]
 80002d8:	2100      	movs	r1, #0
 80002da:	4608      	mov	r0, r1
 80002dc:	e7f5      	b.n	80002ca <__udivmoddi4+0xa2>
 80002de:	fab3 f183 	clz	r1, r3
 80002e2:	2900      	cmp	r1, #0
 80002e4:	d146      	bne.n	8000374 <__udivmoddi4+0x14c>
 80002e6:	4573      	cmp	r3, lr
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xc8>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 8105 	bhi.w	80004fa <__udivmoddi4+0x2d2>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4690      	mov	r8, r2
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e5      	beq.n	80002ca <__udivmoddi4+0xa2>
 80002fe:	e9c5 4800 	strd	r4, r8, [r5]
 8000302:	e7e2      	b.n	80002ca <__udivmoddi4+0xa2>
 8000304:	2a00      	cmp	r2, #0
 8000306:	f000 8090 	beq.w	800042a <__udivmoddi4+0x202>
 800030a:	fab2 f682 	clz	r6, r2
 800030e:	2e00      	cmp	r6, #0
 8000310:	f040 80a4 	bne.w	800045c <__udivmoddi4+0x234>
 8000314:	1a8a      	subs	r2, r1, r2
 8000316:	0c03      	lsrs	r3, r0, #16
 8000318:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800031c:	b280      	uxth	r0, r0
 800031e:	b2bc      	uxth	r4, r7
 8000320:	2101      	movs	r1, #1
 8000322:	fbb2 fcfe 	udiv	ip, r2, lr
 8000326:	fb0e 221c 	mls	r2, lr, ip, r2
 800032a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800032e:	fb04 f20c 	mul.w	r2, r4, ip
 8000332:	429a      	cmp	r2, r3
 8000334:	d907      	bls.n	8000346 <__udivmoddi4+0x11e>
 8000336:	18fb      	adds	r3, r7, r3
 8000338:	f10c 38ff 	add.w	r8, ip, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x11c>
 800033e:	429a      	cmp	r2, r3
 8000340:	f200 80e0 	bhi.w	8000504 <__udivmoddi4+0x2dc>
 8000344:	46c4      	mov	ip, r8
 8000346:	1a9b      	subs	r3, r3, r2
 8000348:	fbb3 f2fe 	udiv	r2, r3, lr
 800034c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000350:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000354:	fb02 f404 	mul.w	r4, r2, r4
 8000358:	429c      	cmp	r4, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x144>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x142>
 8000364:	429c      	cmp	r4, r3
 8000366:	f200 80ca 	bhi.w	80004fe <__udivmoddi4+0x2d6>
 800036a:	4602      	mov	r2, r0
 800036c:	1b1b      	subs	r3, r3, r4
 800036e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000372:	e7a5      	b.n	80002c0 <__udivmoddi4+0x98>
 8000374:	f1c1 0620 	rsb	r6, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 f706 	lsr.w	r7, r2, r6
 800037e:	431f      	orrs	r7, r3
 8000380:	fa0e f401 	lsl.w	r4, lr, r1
 8000384:	fa20 f306 	lsr.w	r3, r0, r6
 8000388:	fa2e fe06 	lsr.w	lr, lr, r6
 800038c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fa00 f801 	lsl.w	r8, r0, r1
 8000396:	fa1f fc87 	uxth.w	ip, r7
 800039a:	fbbe f0f9 	udiv	r0, lr, r9
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003a4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003a8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003ac:	45a6      	cmp	lr, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x1a0>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ba:	f080 809c 	bcs.w	80004f6 <__udivmoddi4+0x2ce>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f240 8099 	bls.w	80004f6 <__udivmoddi4+0x2ce>
 80003c4:	3802      	subs	r0, #2
 80003c6:	443c      	add	r4, r7
 80003c8:	eba4 040e 	sub.w	r4, r4, lr
 80003cc:	fa1f fe83 	uxth.w	lr, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003dc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e0:	45a4      	cmp	ip, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1ce>
 80003e4:	193c      	adds	r4, r7, r4
 80003e6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ea:	f080 8082 	bcs.w	80004f2 <__udivmoddi4+0x2ca>
 80003ee:	45a4      	cmp	ip, r4
 80003f0:	d97f      	bls.n	80004f2 <__udivmoddi4+0x2ca>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000402:	4564      	cmp	r4, ip
 8000404:	4673      	mov	r3, lr
 8000406:	46e1      	mov	r9, ip
 8000408:	d362      	bcc.n	80004d0 <__udivmoddi4+0x2a8>
 800040a:	d05f      	beq.n	80004cc <__udivmoddi4+0x2a4>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x1fe>
 800040e:	ebb8 0203 	subs.w	r2, r8, r3
 8000412:	eb64 0409 	sbc.w	r4, r4, r9
 8000416:	fa04 f606 	lsl.w	r6, r4, r6
 800041a:	fa22 f301 	lsr.w	r3, r2, r1
 800041e:	431e      	orrs	r6, r3
 8000420:	40cc      	lsrs	r4, r1
 8000422:	e9c5 6400 	strd	r6, r4, [r5]
 8000426:	2100      	movs	r1, #0
 8000428:	e74f      	b.n	80002ca <__udivmoddi4+0xa2>
 800042a:	fbb1 fcf2 	udiv	ip, r1, r2
 800042e:	0c01      	lsrs	r1, r0, #16
 8000430:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000434:	b280      	uxth	r0, r0
 8000436:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800043a:	463b      	mov	r3, r7
 800043c:	4638      	mov	r0, r7
 800043e:	463c      	mov	r4, r7
 8000440:	46b8      	mov	r8, r7
 8000442:	46be      	mov	lr, r7
 8000444:	2620      	movs	r6, #32
 8000446:	fbb1 f1f7 	udiv	r1, r1, r7
 800044a:	eba2 0208 	sub.w	r2, r2, r8
 800044e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000452:	e766      	b.n	8000322 <__udivmoddi4+0xfa>
 8000454:	4601      	mov	r1, r0
 8000456:	e718      	b.n	800028a <__udivmoddi4+0x62>
 8000458:	4610      	mov	r0, r2
 800045a:	e72c      	b.n	80002b6 <__udivmoddi4+0x8e>
 800045c:	f1c6 0220 	rsb	r2, r6, #32
 8000460:	fa2e f302 	lsr.w	r3, lr, r2
 8000464:	40b7      	lsls	r7, r6
 8000466:	40b1      	lsls	r1, r6
 8000468:	fa20 f202 	lsr.w	r2, r0, r2
 800046c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000470:	430a      	orrs	r2, r1
 8000472:	fbb3 f8fe 	udiv	r8, r3, lr
 8000476:	b2bc      	uxth	r4, r7
 8000478:	fb0e 3318 	mls	r3, lr, r8, r3
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb08 f904 	mul.w	r9, r8, r4
 8000486:	40b0      	lsls	r0, r6
 8000488:	4589      	cmp	r9, r1
 800048a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800048e:	b280      	uxth	r0, r0
 8000490:	d93e      	bls.n	8000510 <__udivmoddi4+0x2e8>
 8000492:	1879      	adds	r1, r7, r1
 8000494:	f108 3cff 	add.w	ip, r8, #4294967295
 8000498:	d201      	bcs.n	800049e <__udivmoddi4+0x276>
 800049a:	4589      	cmp	r9, r1
 800049c:	d81f      	bhi.n	80004de <__udivmoddi4+0x2b6>
 800049e:	eba1 0109 	sub.w	r1, r1, r9
 80004a2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a6:	fb09 f804 	mul.w	r8, r9, r4
 80004aa:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ae:	b292      	uxth	r2, r2
 80004b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d229      	bcs.n	800050c <__udivmoddi4+0x2e4>
 80004b8:	18ba      	adds	r2, r7, r2
 80004ba:	f109 31ff 	add.w	r1, r9, #4294967295
 80004be:	d2c4      	bcs.n	800044a <__udivmoddi4+0x222>
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d2c2      	bcs.n	800044a <__udivmoddi4+0x222>
 80004c4:	f1a9 0102 	sub.w	r1, r9, #2
 80004c8:	443a      	add	r2, r7
 80004ca:	e7be      	b.n	800044a <__udivmoddi4+0x222>
 80004cc:	45f0      	cmp	r8, lr
 80004ce:	d29d      	bcs.n	800040c <__udivmoddi4+0x1e4>
 80004d0:	ebbe 0302 	subs.w	r3, lr, r2
 80004d4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004d8:	3801      	subs	r0, #1
 80004da:	46e1      	mov	r9, ip
 80004dc:	e796      	b.n	800040c <__udivmoddi4+0x1e4>
 80004de:	eba7 0909 	sub.w	r9, r7, r9
 80004e2:	4449      	add	r1, r9
 80004e4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004e8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ec:	fb09 f804 	mul.w	r8, r9, r4
 80004f0:	e7db      	b.n	80004aa <__udivmoddi4+0x282>
 80004f2:	4673      	mov	r3, lr
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1ce>
 80004f6:	4650      	mov	r0, sl
 80004f8:	e766      	b.n	80003c8 <__udivmoddi4+0x1a0>
 80004fa:	4608      	mov	r0, r1
 80004fc:	e6fd      	b.n	80002fa <__udivmoddi4+0xd2>
 80004fe:	443b      	add	r3, r7
 8000500:	3a02      	subs	r2, #2
 8000502:	e733      	b.n	800036c <__udivmoddi4+0x144>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	443b      	add	r3, r7
 800050a:	e71c      	b.n	8000346 <__udivmoddi4+0x11e>
 800050c:	4649      	mov	r1, r9
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x222>
 8000510:	eba1 0109 	sub.w	r1, r1, r9
 8000514:	46c4      	mov	ip, r8
 8000516:	fbb1 f9fe 	udiv	r9, r1, lr
 800051a:	fb09 f804 	mul.w	r8, r9, r4
 800051e:	e7c4      	b.n	80004aa <__udivmoddi4+0x282>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <toggle_led>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void toggle_led(void) { //Activate/Toggle LED
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000528:	2120      	movs	r1, #32
 800052a:	4802      	ldr	r0, [pc, #8]	@ (8000534 <toggle_led+0x10>)
 800052c:	f001 faf3 	bl	8001b16 <HAL_GPIO_TogglePin>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40020000 	.word	0x40020000

08000538 <send_uart_message>:

void send_uart_message(char *msg) { //Send Message through UART
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f7ff fe51 	bl	80001e8 <strlen>
 8000546:	4603      	mov	r3, r0
 8000548:	b29a      	uxth	r2, r3
 800054a:	f04f 33ff 	mov.w	r3, #4294967295
 800054e:	6879      	ldr	r1, [r7, #4]
 8000550:	4803      	ldr	r0, [pc, #12]	@ (8000560 <send_uart_message+0x28>)
 8000552:	f003 f93b 	bl	80037cc <HAL_UART_Transmit>
}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000118 	.word	0x20000118

08000564 <handle_button_press>:

void handle_button_press(void) { //Button Press actions
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
    toggle_led();
 8000568:	f7ff ffdc 	bl	8000524 <toggle_led>
    HAL_Delay(200); // debounce
 800056c:	20c8      	movs	r0, #200	@ 0xc8
 800056e:	f001 f813 	bl	8001598 <HAL_Delay>
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
	...

08000578 <buzzer_on>:


/* Buzzer PWM Functions */
void buzzer_on(void) {
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 250); //Duty Cycle - 50%
 800057c:	4b04      	ldr	r3, [pc, #16]	@ (8000590 <buzzer_on+0x18>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	22fa      	movs	r2, #250	@ 0xfa
 8000582:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	200000d0 	.word	0x200000d0

08000594 <buzzer_off>:

void buzzer_off(void) {
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0); //Duty Cycle - 0% (off)
 8000598:	4b04      	ldr	r3, [pc, #16]	@ (80005ac <buzzer_off+0x18>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2200      	movs	r2, #0
 800059e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	200000d0 	.word	0x200000d0

080005b0 <SH1107_Write_Command>:



/* OLED Command Functions */
// Function to send a command to the OLED
void SH1107_Write_Command(uint8_t cmd) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af02      	add	r7, sp, #8
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
    uint8_t buffer[2] = {0x00, cmd}; // 0x00 = command
 80005ba:	2300      	movs	r3, #0
 80005bc:	733b      	strb	r3, [r7, #12]
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, SH1107_ADDR << 1, buffer, 2, HAL_MAX_DELAY);
 80005c2:	f107 020c 	add.w	r2, r7, #12
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	2302      	movs	r3, #2
 80005ce:	2178      	movs	r1, #120	@ 0x78
 80005d0:	4803      	ldr	r0, [pc, #12]	@ (80005e0 <SH1107_Write_Command+0x30>)
 80005d2:	f001 fbff 	bl	8001dd4 <HAL_I2C_Master_Transmit>
}
 80005d6:	bf00      	nop
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000034 	.word	0x20000034

080005e4 <SH1107_Write_Data>:

void SH1107_Write_Data(uint8_t data) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
    uint8_t buffer[2] = {0x40, data}; // 0x40 = data
 80005ee:	2340      	movs	r3, #64	@ 0x40
 80005f0:	733b      	strb	r3, [r7, #12]
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, SH1107_ADDR << 1, buffer, 2, HAL_MAX_DELAY);
 80005f6:	f107 020c 	add.w	r2, r7, #12
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2302      	movs	r3, #2
 8000602:	2178      	movs	r1, #120	@ 0x78
 8000604:	4803      	ldr	r0, [pc, #12]	@ (8000614 <SH1107_Write_Data+0x30>)
 8000606:	f001 fbe5 	bl	8001dd4 <HAL_I2C_Master_Transmit>
}
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000034 	.word	0x20000034

08000618 <SH1107_Init>:

void SH1107_Init(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
    HAL_Delay(100);
 800061c:	2064      	movs	r0, #100	@ 0x64
 800061e:	f000 ffbb 	bl	8001598 <HAL_Delay>

    SH1107_Write_Command(0xAE); // Display OFF
 8000622:	20ae      	movs	r0, #174	@ 0xae
 8000624:	f7ff ffc4 	bl	80005b0 <SH1107_Write_Command>
    SH1107_Write_Command(0xDC); // Set display start line
 8000628:	20dc      	movs	r0, #220	@ 0xdc
 800062a:	f7ff ffc1 	bl	80005b0 <SH1107_Write_Command>
    SH1107_Write_Command(0x00);
 800062e:	2000      	movs	r0, #0
 8000630:	f7ff ffbe 	bl	80005b0 <SH1107_Write_Command>
    SH1107_Write_Command(0x81); // Set contrast control
 8000634:	2081      	movs	r0, #129	@ 0x81
 8000636:	f7ff ffbb 	bl	80005b0 <SH1107_Write_Command>
    SH1107_Write_Command(0x2F);
 800063a:	202f      	movs	r0, #47	@ 0x2f
 800063c:	f7ff ffb8 	bl	80005b0 <SH1107_Write_Command>
    SH1107_Write_Command(0x20); // Set memory addressing mode
 8000640:	2020      	movs	r0, #32
 8000642:	f7ff ffb5 	bl	80005b0 <SH1107_Write_Command>
    SH1107_Write_Command(0xA0); // Segment remap
 8000646:	20a0      	movs	r0, #160	@ 0xa0
 8000648:	f7ff ffb2 	bl	80005b0 <SH1107_Write_Command>
    SH1107_Write_Command(0xC0); // COM scan direction normal
 800064c:	20c0      	movs	r0, #192	@ 0xc0
 800064e:	f7ff ffaf 	bl	80005b0 <SH1107_Write_Command>
    SH1107_Write_Command(0xA8); // Set multiplex ratio
 8000652:	20a8      	movs	r0, #168	@ 0xa8
 8000654:	f7ff ffac 	bl	80005b0 <SH1107_Write_Command>
    SH1107_Write_Command(0x7F); // 128MUX
 8000658:	207f      	movs	r0, #127	@ 0x7f
 800065a:	f7ff ffa9 	bl	80005b0 <SH1107_Write_Command>
    SH1107_Write_Command(0xD3); // Display offset
 800065e:	20d3      	movs	r0, #211	@ 0xd3
 8000660:	f7ff ffa6 	bl	80005b0 <SH1107_Write_Command>
    SH1107_Write_Command(0x60); // Suggested for 128x128
 8000664:	2060      	movs	r0, #96	@ 0x60
 8000666:	f7ff ffa3 	bl	80005b0 <SH1107_Write_Command>
    SH1107_Write_Command(0xD5); // Display clock divide
 800066a:	20d5      	movs	r0, #213	@ 0xd5
 800066c:	f7ff ffa0 	bl	80005b0 <SH1107_Write_Command>
    SH1107_Write_Command(0x50);
 8000670:	2050      	movs	r0, #80	@ 0x50
 8000672:	f7ff ff9d 	bl	80005b0 <SH1107_Write_Command>
    SH1107_Write_Command(0xD9); // Set pre-charge
 8000676:	20d9      	movs	r0, #217	@ 0xd9
 8000678:	f7ff ff9a 	bl	80005b0 <SH1107_Write_Command>
    SH1107_Write_Command(0x22);
 800067c:	2022      	movs	r0, #34	@ 0x22
 800067e:	f7ff ff97 	bl	80005b0 <SH1107_Write_Command>
    SH1107_Write_Command(0xDB); // Set VCOMH Deselect Level
 8000682:	20db      	movs	r0, #219	@ 0xdb
 8000684:	f7ff ff94 	bl	80005b0 <SH1107_Write_Command>
    SH1107_Write_Command(0x35);
 8000688:	2035      	movs	r0, #53	@ 0x35
 800068a:	f7ff ff91 	bl	80005b0 <SH1107_Write_Command>
    SH1107_Write_Command(0xAD); // Charge Pump
 800068e:	20ad      	movs	r0, #173	@ 0xad
 8000690:	f7ff ff8e 	bl	80005b0 <SH1107_Write_Command>
    SH1107_Write_Command(0x8A);
 8000694:	208a      	movs	r0, #138	@ 0x8a
 8000696:	f7ff ff8b 	bl	80005b0 <SH1107_Write_Command>
    SH1107_Write_Command(0xAF); // Display ON
 800069a:	20af      	movs	r0, #175	@ 0xaf
 800069c:	f7ff ff88 	bl	80005b0 <SH1107_Write_Command>
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <SH1107_Clear>:


void SH1107_Clear(void) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
    for (int page = 0; page < 8; page++) {
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	e01b      	b.n	80006e8 <SH1107_Clear+0x44>
        SH1107_Write_Command(0xB0 + page); // Page address
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	3b50      	subs	r3, #80	@ 0x50
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff ff79 	bl	80005b0 <SH1107_Write_Command>
        SH1107_Write_Command(0x00);        // Lower column start
 80006be:	2000      	movs	r0, #0
 80006c0:	f7ff ff76 	bl	80005b0 <SH1107_Write_Command>
        SH1107_Write_Command(0x10);        // Upper column start
 80006c4:	2010      	movs	r0, #16
 80006c6:	f7ff ff73 	bl	80005b0 <SH1107_Write_Command>
        for (int col = 0; col < 128; col++) {
 80006ca:	2300      	movs	r3, #0
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	e005      	b.n	80006dc <SH1107_Clear+0x38>
            SH1107_Write_Data(0x00);       // Blank
 80006d0:	2000      	movs	r0, #0
 80006d2:	f7ff ff87 	bl	80005e4 <SH1107_Write_Data>
        for (int col = 0; col < 128; col++) {
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	3301      	adds	r3, #1
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	2b7f      	cmp	r3, #127	@ 0x7f
 80006e0:	ddf6      	ble.n	80006d0 <SH1107_Clear+0x2c>
    for (int page = 0; page < 8; page++) {
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	3301      	adds	r3, #1
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b07      	cmp	r3, #7
 80006ec:	dde0      	ble.n	80006b0 <SH1107_Clear+0xc>
        }
    }
}
 80006ee:	bf00      	nop
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <SH1107_Set_Cursor>:
    ['Z' - 32] = {0x61, 0x51, 0x49, 0x45, 0x43},
};



void SH1107_Set_Cursor(uint8_t page, uint8_t col) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	460a      	mov	r2, r1
 8000702:	71fb      	strb	r3, [r7, #7]
 8000704:	4613      	mov	r3, r2
 8000706:	71bb      	strb	r3, [r7, #6]
    SH1107_Write_Command(0xB0 + page);             // Set page address
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	3b50      	subs	r3, #80	@ 0x50
 800070c:	b2db      	uxtb	r3, r3
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ff4e 	bl	80005b0 <SH1107_Write_Command>
    SH1107_Write_Command(col & 0x0F);              // Set lower column address
 8000714:	79bb      	ldrb	r3, [r7, #6]
 8000716:	f003 030f 	and.w	r3, r3, #15
 800071a:	b2db      	uxtb	r3, r3
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff ff47 	bl	80005b0 <SH1107_Write_Command>
    SH1107_Write_Command(0x10 | (col >> 4));       // Set higher column address
 8000722:	79bb      	ldrb	r3, [r7, #6]
 8000724:	091b      	lsrs	r3, r3, #4
 8000726:	b2db      	uxtb	r3, r3
 8000728:	f043 0310 	orr.w	r3, r3, #16
 800072c:	b2db      	uxtb	r3, r3
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ff3e 	bl	80005b0 <SH1107_Write_Command>
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <SH1107_Write_Char>:

void SH1107_Write_Char(char c) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
    if (c < 32 || c > 126) c = ' '; // fallback to space
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	2b1f      	cmp	r3, #31
 800074a:	d902      	bls.n	8000752 <SH1107_Write_Char+0x16>
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	2b7e      	cmp	r3, #126	@ 0x7e
 8000750:	d901      	bls.n	8000756 <SH1107_Write_Char+0x1a>
 8000752:	2320      	movs	r3, #32
 8000754:	71fb      	strb	r3, [r7, #7]
    const uint8_t *bitmap = font5x7[c - 32];
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	f1a3 0220 	sub.w	r2, r3, #32
 800075c:	4613      	mov	r3, r2
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	4413      	add	r3, r2
 8000762:	4a0d      	ldr	r2, [pc, #52]	@ (8000798 <SH1107_Write_Char+0x5c>)
 8000764:	4413      	add	r3, r2
 8000766:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < 5; i++) {
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	e009      	b.n	8000782 <SH1107_Write_Char+0x46>
        SH1107_Write_Data(bitmap[i]);
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	68ba      	ldr	r2, [r7, #8]
 8000772:	4413      	add	r3, r2
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ff34 	bl	80005e4 <SH1107_Write_Data>
    for (int i = 0; i < 5; i++) {
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	3301      	adds	r3, #1
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2b04      	cmp	r3, #4
 8000786:	ddf2      	ble.n	800076e <SH1107_Write_Char+0x32>
    }
    SH1107_Write_Data(0x00); // Space between characters
 8000788:	2000      	movs	r0, #0
 800078a:	f7ff ff2b 	bl	80005e4 <SH1107_Write_Data>
}
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	08004088 	.word	0x08004088

0800079c <SH1107_Write_String>:

void SH1107_Write_String(const char* str) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
    while (*str) {
 80007a4:	e006      	b.n	80007b4 <SH1107_Write_String+0x18>
        SH1107_Write_Char(*str++);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	1c5a      	adds	r2, r3, #1
 80007aa:	607a      	str	r2, [r7, #4]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff ffc4 	bl	800073c <SH1107_Write_Char>
    while (*str) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d1f4      	bne.n	80007a6 <SH1107_Write_String+0xa>
    }
}
 80007bc:	bf00      	nop
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <SH1107_Unlock_Animation>:

void SH1107_Unlock_Animation(void) {
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
    for (int page = 0; page < 8; page++) {  // SH1107 usually has 8 pages (each 8px tall)
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	e017      	b.n	8000802 <SH1107_Unlock_Animation+0x3c>
        SH1107_Set_Cursor(0, page);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	4619      	mov	r1, r3
 80007d8:	2000      	movs	r0, #0
 80007da:	f7ff ff8d 	bl	80006f8 <SH1107_Set_Cursor>
        for (int col = 0; col < 128; col++) {
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	e008      	b.n	80007f6 <SH1107_Unlock_Animation+0x30>
            SH1107_Write_Data(0xFF);  // Fill this line
 80007e4:	20ff      	movs	r0, #255	@ 0xff
 80007e6:	f7ff fefd 	bl	80005e4 <SH1107_Write_Data>
            HAL_Delay(1);             // Delay for visual effect
 80007ea:	2001      	movs	r0, #1
 80007ec:	f000 fed4 	bl	8001598 <HAL_Delay>
        for (int col = 0; col < 128; col++) {
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	3301      	adds	r3, #1
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80007fa:	ddf3      	ble.n	80007e4 <SH1107_Unlock_Animation+0x1e>
    for (int page = 0; page < 8; page++) {  // SH1107 usually has 8 pages (each 8px tall)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3301      	adds	r3, #1
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2b07      	cmp	r3, #7
 8000806:	dde4      	ble.n	80007d2 <SH1107_Unlock_Animation+0xc>
        }
    }
    HAL_Delay(500);
 8000808:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800080c:	f000 fec4 	bl	8001598 <HAL_Delay>
    SH1107_Clear();
 8000810:	f7ff ff48 	bl	80006a4 <SH1107_Clear>
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <servo_set_angle>:


uint32_t  buttonCount = 0;

/* Servo Functions*/
void servo_set_angle(uint8_t angle) {
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
	 if (angle > 180) angle = 180;
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	2bb4      	cmp	r3, #180	@ 0xb4
 800082a:	d901      	bls.n	8000830 <servo_set_angle+0x14>
 800082c:	23b4      	movs	r3, #180	@ 0xb4
 800082e:	71fb      	strb	r3, [r7, #7]
	 uint16_t pulse = ((angle * 1000) / 180) + 1000;  // maps 0–180° to 1000–2000
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000836:	fb02 f303 	mul.w	r3, r2, r3
 800083a:	4a0a      	ldr	r2, [pc, #40]	@ (8000864 <servo_set_angle+0x48>)
 800083c:	fb82 1203 	smull	r1, r2, r2, r3
 8000840:	441a      	add	r2, r3
 8000842:	11d2      	asrs	r2, r2, #7
 8000844:	17db      	asrs	r3, r3, #31
 8000846:	1ad3      	subs	r3, r2, r3
 8000848:	b29b      	uxth	r3, r3
 800084a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800084e:	81fb      	strh	r3, [r7, #14]
	 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse);
 8000850:	4b05      	ldr	r3, [pc, #20]	@ (8000868 <servo_set_angle+0x4c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	89fa      	ldrh	r2, [r7, #14]
 8000856:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000858:	bf00      	nop
 800085a:	3714      	adds	r7, #20
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	b60b60b7 	.word	0xb60b60b7
 8000868:	20000088 	.word	0x20000088

0800086c <keypad_password>:
char password[MAX_PASS_LENGTH + 1] = "628511";  // Example password
char input[MAX_PASS_LENGTH + 1] = {0};
uint8_t input_index = 0;
uint8_t failed_entry = 0;

void keypad_password() {
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b099      	sub	sp, #100	@ 0x64
 8000870:	af00      	add	r7, sp, #0
    GPIO_TypeDef* row_ports[4] = {GPIOA, GPIOB, GPIOB, GPIOB};
 8000872:	4bb1      	ldr	r3, [pc, #708]	@ (8000b38 <keypad_password+0x2cc>)
 8000874:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8000878:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800087a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint16_t row_pins[4] = {GPIO_PIN_8, GPIO_PIN_10, GPIO_PIN_4, GPIO_PIN_5};
 800087e:	4aaf      	ldr	r2, [pc, #700]	@ (8000b3c <keypad_password+0x2d0>)
 8000880:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000884:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000888:	e883 0003 	stmia.w	r3, {r0, r1}

    GPIO_TypeDef* col_ports[4] = {GPIOA, GPIOB, GPIOC, GPIOC};
 800088c:	4bac      	ldr	r3, [pc, #688]	@ (8000b40 <keypad_password+0x2d4>)
 800088e:	f107 0418 	add.w	r4, r7, #24
 8000892:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000894:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint16_t col_pins[4] = {GPIO_PIN_4, GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_0};
 8000898:	4aaa      	ldr	r2, [pc, #680]	@ (8000b44 <keypad_password+0x2d8>)
 800089a:	f107 0310 	add.w	r3, r7, #16
 800089e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008a2:	e883 0003 	stmia.w	r3, {r0, r1}

    const char keypad_map[4][4] = {
 80008a6:	4ba8      	ldr	r3, [pc, #672]	@ (8000b48 <keypad_password+0x2dc>)
 80008a8:	463c      	mov	r4, r7
 80008aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {'*', '0', '#', 'D'}
    };

 //   char msg[32];

    for (int r = 0; r < 4; r++) {
 80008b0:	2300      	movs	r3, #0
 80008b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80008b4:	e136      	b.n	8000b24 <keypad_password+0x2b8>
        // Set all rows HIGH
        for (int i = 0; i < 4; i++) {
 80008b6:	2300      	movs	r3, #0
 80008b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80008ba:	e012      	b.n	80008e2 <keypad_password+0x76>
            HAL_GPIO_WritePin(row_ports[i], row_pins[i], GPIO_PIN_SET);
 80008bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	3360      	adds	r3, #96	@ 0x60
 80008c2:	443b      	add	r3, r7
 80008c4:	f853 0c30 	ldr.w	r0, [r3, #-48]
 80008c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	3360      	adds	r3, #96	@ 0x60
 80008ce:	443b      	add	r3, r7
 80008d0:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 80008d4:	2201      	movs	r2, #1
 80008d6:	4619      	mov	r1, r3
 80008d8:	f001 f904 	bl	8001ae4 <HAL_GPIO_WritePin>
        for (int i = 0; i < 4; i++) {
 80008dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80008de:	3301      	adds	r3, #1
 80008e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80008e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80008e4:	2b03      	cmp	r3, #3
 80008e6:	dde9      	ble.n	80008bc <keypad_password+0x50>
        }

        // Set current row LOW
        HAL_GPIO_WritePin(row_ports[r], row_pins[r], GPIO_PIN_RESET);
 80008e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	3360      	adds	r3, #96	@ 0x60
 80008ee:	443b      	add	r3, r7
 80008f0:	f853 0c30 	ldr.w	r0, [r3, #-48]
 80008f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	3360      	adds	r3, #96	@ 0x60
 80008fa:	443b      	add	r3, r7
 80008fc:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 8000900:	2200      	movs	r2, #0
 8000902:	4619      	mov	r1, r3
 8000904:	f001 f8ee 	bl	8001ae4 <HAL_GPIO_WritePin>
        HAL_Delay(1);  // debounce
 8000908:	2001      	movs	r0, #1
 800090a:	f000 fe45 	bl	8001598 <HAL_Delay>

        // Check each column
        for (int c = 0; c < 4; c++) {
 800090e:	2300      	movs	r3, #0
 8000910:	657b      	str	r3, [r7, #84]	@ 0x54
 8000912:	e100      	b.n	8000b16 <keypad_password+0x2aa>
            if (HAL_GPIO_ReadPin(col_ports[c], col_pins[c]) == GPIO_PIN_RESET) {
 8000914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	3360      	adds	r3, #96	@ 0x60
 800091a:	443b      	add	r3, r7
 800091c:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8000920:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	3360      	adds	r3, #96	@ 0x60
 8000926:	443b      	add	r3, r7
 8000928:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 800092c:	4619      	mov	r1, r3
 800092e:	4610      	mov	r0, r2
 8000930:	f001 f8c0 	bl	8001ab4 <HAL_GPIO_ReadPin>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	f040 80ea 	bne.w	8000b10 <keypad_password+0x2a4>
                char key = keypad_map[r][c];
 800093c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	3360      	adds	r3, #96	@ 0x60
 8000942:	19da      	adds	r2, r3, r7
 8000944:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000946:	4413      	add	r3, r2
 8000948:	3b60      	subs	r3, #96	@ 0x60
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43


                // Debounce
                while (HAL_GPIO_ReadPin(col_ports[c], col_pins[c]) == GPIO_PIN_RESET);
 8000950:	bf00      	nop
 8000952:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	3360      	adds	r3, #96	@ 0x60
 8000958:	443b      	add	r3, r7
 800095a:	f853 2c48 	ldr.w	r2, [r3, #-72]
 800095e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	3360      	adds	r3, #96	@ 0x60
 8000964:	443b      	add	r3, r7
 8000966:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 800096a:	4619      	mov	r1, r3
 800096c:	4610      	mov	r0, r2
 800096e:	f001 f8a1 	bl	8001ab4 <HAL_GPIO_ReadPin>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d0ec      	beq.n	8000952 <keypad_password+0xe6>
                HAL_Delay(100);
 8000978:	2064      	movs	r0, #100	@ 0x64
 800097a:	f000 fe0d 	bl	8001598 <HAL_Delay>

                // Beep
                buzzer_on();
 800097e:	f7ff fdfb 	bl	8000578 <buzzer_on>
                HAL_Delay(100);
 8000982:	2064      	movs	r0, #100	@ 0x64
 8000984:	f000 fe08 	bl	8001598 <HAL_Delay>
                buzzer_off();
 8000988:	f7ff fe04 	bl	8000594 <buzzer_off>


                // Save Key
                if (input_index <MAX_PASS_LENGTH) {
 800098c:	4b6f      	ldr	r3, [pc, #444]	@ (8000b4c <keypad_password+0x2e0>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b07      	cmp	r3, #7
 8000992:	d810      	bhi.n	80009b6 <keypad_password+0x14a>
                	input[input_index++] = key;
 8000994:	4b6d      	ldr	r3, [pc, #436]	@ (8000b4c <keypad_password+0x2e0>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	1c5a      	adds	r2, r3, #1
 800099a:	b2d1      	uxtb	r1, r2
 800099c:	4a6b      	ldr	r2, [pc, #428]	@ (8000b4c <keypad_password+0x2e0>)
 800099e:	7011      	strb	r1, [r2, #0]
 80009a0:	4619      	mov	r1, r3
 80009a2:	4a6b      	ldr	r2, [pc, #428]	@ (8000b50 <keypad_password+0x2e4>)
 80009a4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80009a8:	5453      	strb	r3, [r2, r1]
                	input[input_index] = '\0'; //Null-terminate
 80009aa:	4b68      	ldr	r3, [pc, #416]	@ (8000b4c <keypad_password+0x2e0>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	461a      	mov	r2, r3
 80009b0:	4b67      	ldr	r3, [pc, #412]	@ (8000b50 <keypad_password+0x2e4>)
 80009b2:	2100      	movs	r1, #0
 80009b4:	5499      	strb	r1, [r3, r2]
                }

                // OLED Display
                SH1107_Clear();
 80009b6:	f7ff fe75 	bl	80006a4 <SH1107_Clear>
                SH1107_Set_Cursor(0,0);
 80009ba:	2100      	movs	r1, #0
 80009bc:	2000      	movs	r0, #0
 80009be:	f7ff fe9b 	bl	80006f8 <SH1107_Set_Cursor>
                for (uint8_t i = 0; i < input_index; i++) {
 80009c2:	2300      	movs	r3, #0
 80009c4:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80009c8:	e007      	b.n	80009da <keypad_password+0x16e>
                	SH1107_Write_Char('*');
 80009ca:	202a      	movs	r0, #42	@ 0x2a
 80009cc:	f7ff feb6 	bl	800073c <SH1107_Write_Char>
                for (uint8_t i = 0; i < input_index; i++) {
 80009d0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80009d4:	3301      	adds	r3, #1
 80009d6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80009da:	4b5c      	ldr	r3, [pc, #368]	@ (8000b4c <keypad_password+0x2e0>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d3f1      	bcc.n	80009ca <keypad_password+0x15e>
                }

                // Check if full length entered
                if (input_index == strlen(password)) {
 80009e6:	4b59      	ldr	r3, [pc, #356]	@ (8000b4c <keypad_password+0x2e0>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	461c      	mov	r4, r3
 80009ec:	4859      	ldr	r0, [pc, #356]	@ (8000b54 <keypad_password+0x2e8>)
 80009ee:	f7ff fbfb 	bl	80001e8 <strlen>
 80009f2:	4603      	mov	r3, r0
 80009f4:	429c      	cmp	r4, r3
 80009f6:	d162      	bne.n	8000abe <keypad_password+0x252>
                    if (strcmp(input, password) == 0) {
 80009f8:	4956      	ldr	r1, [pc, #344]	@ (8000b54 <keypad_password+0x2e8>)
 80009fa:	4855      	ldr	r0, [pc, #340]	@ (8000b50 <keypad_password+0x2e4>)
 80009fc:	f7ff fbea 	bl	80001d4 <strcmp>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d125      	bne.n	8000a52 <keypad_password+0x1e6>
                    	SH1107_Clear();
 8000a06:	f7ff fe4d 	bl	80006a4 <SH1107_Clear>
                        SH1107_Set_Cursor(0, 0);
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f7ff fe73 	bl	80006f8 <SH1107_Set_Cursor>
                        SH1107_Write_String("UNLOCKED!");
 8000a12:	4851      	ldr	r0, [pc, #324]	@ (8000b58 <keypad_password+0x2ec>)
 8000a14:	f7ff fec2 	bl	800079c <SH1107_Write_String>
                        send_uart_message("Correct password!\r\n");
 8000a18:	4850      	ldr	r0, [pc, #320]	@ (8000b5c <keypad_password+0x2f0>)
 8000a1a:	f7ff fd8d 	bl	8000538 <send_uart_message>
                        servo_set_angle(90);  // Open
 8000a1e:	205a      	movs	r0, #90	@ 0x5a
 8000a20:	f7ff fefc 	bl	800081c <servo_set_angle>
                        failed_entry = 0;
 8000a24:	4b4e      	ldr	r3, [pc, #312]	@ (8000b60 <keypad_password+0x2f4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
                        for(int i = 0; i < 5; i++) { // Five Beeps for successful entry
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000a2e:	e00c      	b.n	8000a4a <keypad_password+0x1de>
                        	buzzer_on();
 8000a30:	f7ff fda2 	bl	8000578 <buzzer_on>
                        	HAL_Delay(100);
 8000a34:	2064      	movs	r0, #100	@ 0x64
 8000a36:	f000 fdaf 	bl	8001598 <HAL_Delay>
                        	buzzer_off();
 8000a3a:	f7ff fdab 	bl	8000594 <buzzer_off>
                        	HAL_Delay(100);
 8000a3e:	2064      	movs	r0, #100	@ 0x64
 8000a40:	f000 fdaa 	bl	8001598 <HAL_Delay>
                        for(int i = 0; i < 5; i++) { // Five Beeps for successful entry
 8000a44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000a46:	3301      	adds	r3, #1
 8000a48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000a4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000a4c:	2b04      	cmp	r3, #4
 8000a4e:	ddef      	ble.n	8000a30 <keypad_password+0x1c4>
 8000a50:	e027      	b.n	8000aa2 <keypad_password+0x236>
                        }
                    } else {
                    	SH1107_Clear();
 8000a52:	f7ff fe27 	bl	80006a4 <SH1107_Clear>
                    	SH1107_Set_Cursor(0, 0);
 8000a56:	2100      	movs	r1, #0
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f7ff fe4d 	bl	80006f8 <SH1107_Set_Cursor>
                    	SH1107_Write_String("ACCESS DENIED");
 8000a5e:	4841      	ldr	r0, [pc, #260]	@ (8000b64 <keypad_password+0x2f8>)
 8000a60:	f7ff fe9c 	bl	800079c <SH1107_Write_String>
                    	send_uart_message("Wrong password!\r\n");
 8000a64:	4840      	ldr	r0, [pc, #256]	@ (8000b68 <keypad_password+0x2fc>)
 8000a66:	f7ff fd67 	bl	8000538 <send_uart_message>
                    	servo_set_angle(180);  // Lock
 8000a6a:	20b4      	movs	r0, #180	@ 0xb4
 8000a6c:	f7ff fed6 	bl	800081c <servo_set_angle>
                    	failed_entry++;
 8000a70:	4b3b      	ldr	r3, [pc, #236]	@ (8000b60 <keypad_password+0x2f4>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	3301      	adds	r3, #1
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	4b39      	ldr	r3, [pc, #228]	@ (8000b60 <keypad_password+0x2f4>)
 8000a7a:	701a      	strb	r2, [r3, #0]
                    	for(int i = 0; i < 2; i++){
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000a80:	e00c      	b.n	8000a9c <keypad_password+0x230>
                    		buzzer_on();
 8000a82:	f7ff fd79 	bl	8000578 <buzzer_on>
                    		HAL_Delay(100);
 8000a86:	2064      	movs	r0, #100	@ 0x64
 8000a88:	f000 fd86 	bl	8001598 <HAL_Delay>
                    		buzzer_off();
 8000a8c:	f7ff fd82 	bl	8000594 <buzzer_off>
                    		HAL_Delay(100);
 8000a90:	2064      	movs	r0, #100	@ 0x64
 8000a92:	f000 fd81 	bl	8001598 <HAL_Delay>
                    	for(int i = 0; i < 2; i++){
 8000a96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000a98:	3301      	adds	r3, #1
 8000a9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000a9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	ddef      	ble.n	8000a82 <keypad_password+0x216>
                    	}
                    }

                    // Reset input
                    memset(input, 0, sizeof(input));
 8000aa2:	2209      	movs	r2, #9
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	482a      	ldr	r0, [pc, #168]	@ (8000b50 <keypad_password+0x2e4>)
 8000aa8:	f003 fa4c 	bl	8003f44 <memset>
                    input_index = 0;
 8000aac:	4b27      	ldr	r3, [pc, #156]	@ (8000b4c <keypad_password+0x2e0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]

                    HAL_Delay(1000);
 8000ab2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ab6:	f000 fd6f 	bl	8001598 <HAL_Delay>
                    SH1107_Clear();
 8000aba:	f7ff fdf3 	bl	80006a4 <SH1107_Clear>
                }

                if (failed_entry >= 3) {
 8000abe:	4b28      	ldr	r3, [pc, #160]	@ (8000b60 <keypad_password+0x2f4>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b02      	cmp	r3, #2
 8000ac4:	d933      	bls.n	8000b2e <keypad_password+0x2c2>
                	SH1107_Clear();
 8000ac6:	f7ff fded 	bl	80006a4 <SH1107_Clear>
                	SH1107_Set_Cursor(0, 0);
 8000aca:	2100      	movs	r1, #0
 8000acc:	2000      	movs	r0, #0
 8000ace:	f7ff fe13 	bl	80006f8 <SH1107_Set_Cursor>
                	SH1107_Write_String("LOCKED OUT");
 8000ad2:	4826      	ldr	r0, [pc, #152]	@ (8000b6c <keypad_password+0x300>)
 8000ad4:	f7ff fe62 	bl	800079c <SH1107_Write_String>
                	send_uart_message("LOCKED OUT FOR TOO MANY FAILED ENTRIES!\r\n");
 8000ad8:	4825      	ldr	r0, [pc, #148]	@ (8000b70 <keypad_password+0x304>)
 8000ada:	f7ff fd2d 	bl	8000538 <send_uart_message>
                	for(int i = 0; i < 10; i++){
 8000ade:	2300      	movs	r3, #0
 8000ae0:	647b      	str	r3, [r7, #68]	@ 0x44
 8000ae2:	e00e      	b.n	8000b02 <keypad_password+0x296>
                		buzzer_on();
 8000ae4:	f7ff fd48 	bl	8000578 <buzzer_on>
                		HAL_Delay(300);
 8000ae8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000aec:	f000 fd54 	bl	8001598 <HAL_Delay>
                		buzzer_off();
 8000af0:	f7ff fd50 	bl	8000594 <buzzer_off>
                		HAL_Delay(300);
 8000af4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000af8:	f000 fd4e 	bl	8001598 <HAL_Delay>
                	for(int i = 0; i < 10; i++){
 8000afc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000afe:	3301      	adds	r3, #1
 8000b00:	647b      	str	r3, [r7, #68]	@ 0x44
 8000b02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b04:	2b09      	cmp	r3, #9
 8000b06:	dded      	ble.n	8000ae4 <keypad_password+0x278>
                	}
                	failed_entry = 0;
 8000b08:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <keypad_password+0x2f4>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	701a      	strb	r2, [r3, #0]
 8000b0e:	e00f      	b.n	8000b30 <keypad_password+0x2c4>
        for (int c = 0; c < 4; c++) {
 8000b10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000b12:	3301      	adds	r3, #1
 8000b14:	657b      	str	r3, [r7, #84]	@ 0x54
 8000b16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000b18:	2b03      	cmp	r3, #3
 8000b1a:	f77f aefb 	ble.w	8000914 <keypad_password+0xa8>
    for (int r = 0; r < 4; r++) {
 8000b1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b20:	3301      	adds	r3, #1
 8000b22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000b24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b26:	2b03      	cmp	r3, #3
 8000b28:	f77f aec5 	ble.w	80008b6 <keypad_password+0x4a>
 8000b2c:	e000      	b.n	8000b30 <keypad_password+0x2c4>
                }

                return;
 8000b2e:	bf00      	nop
            }
        }
    }
}
 8000b30:	3764      	adds	r7, #100	@ 0x64
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd90      	pop	{r4, r7, pc}
 8000b36:	bf00      	nop
 8000b38:	08004030 	.word	0x08004030
 8000b3c:	08004040 	.word	0x08004040
 8000b40:	08004048 	.word	0x08004048
 8000b44:	08004058 	.word	0x08004058
 8000b48:	08004060 	.word	0x08004060
 8000b4c:	2000016d 	.word	0x2000016d
 8000b50:	20000164 	.word	0x20000164
 8000b54:	20000000 	.word	0x20000000
 8000b58:	08003fb4 	.word	0x08003fb4
 8000b5c:	08003fc0 	.word	0x08003fc0
 8000b60:	2000016e 	.word	0x2000016e
 8000b64:	08003fd4 	.word	0x08003fd4
 8000b68:	08003fe4 	.word	0x08003fe4
 8000b6c:	08003ff8 	.word	0x08003ff8
 8000b70:	08004004 	.word	0x08004004

08000b74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b7a:	f000 fc9b 	bl	80014b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7e:	f000 f889 	bl	8000c94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b82:	f000 fa29 	bl	8000fd8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b86:	f000 f9fd 	bl	8000f84 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000b8a:	f000 f9a1 	bl	8000ed0 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000b8e:	f000 f8ed 	bl	8000d6c <MX_I2C1_Init>
  MX_TIM1_Init();
 8000b92:	f000 f919 	bl	8000dc8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Start PWM TIM3_CH1
 8000b96:	2100      	movs	r1, #0
 8000b98:	4837      	ldr	r0, [pc, #220]	@ (8000c78 <main+0x104>)
 8000b9a:	f002 f95d 	bl	8002e58 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // Start PWM TIM1_CH2
 8000b9e:	2104      	movs	r1, #4
 8000ba0:	4836      	ldr	r0, [pc, #216]	@ (8000c7c <main+0x108>)
 8000ba2:	f002 f959 	bl	8002e58 <HAL_TIM_PWM_Start>
          sprintf(buf, "No device at 0x%02X\r\n", addr);
          send_uart_message(buf);
      }
  } */

  SH1107_Init();
 8000ba6:	f7ff fd37 	bl	8000618 <SH1107_Init>
  SH1107_Clear();
 8000baa:	f7ff fd7b 	bl	80006a4 <SH1107_Clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  keypad_password();
 8000bae:	f7ff fe5d 	bl	800086c <keypad_password>
	  	  /* Toggle LED Pin if button is pressed  */
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8000bb2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bb6:	4832      	ldr	r0, [pc, #200]	@ (8000c80 <main+0x10c>)
 8000bb8:	f000 ff7c 	bl	8001ab4 <HAL_GPIO_ReadPin>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d14b      	bne.n	8000c5a <main+0xe6>
		  handle_button_press();
 8000bc2:	f7ff fccf 	bl	8000564 <handle_button_press>
		  servo_set_angle(0);    // Far left
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f7ff fe28 	bl	800081c <servo_set_angle>
		  SH1107_Clear();
 8000bcc:	f7ff fd6a 	bl	80006a4 <SH1107_Clear>
		  SH1107_Set_Cursor(0, 0); //page 0 column 0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f7ff fd90 	bl	80006f8 <SH1107_Set_Cursor>
		  buttonCount++;
 8000bd8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c84 <main+0x110>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	4a29      	ldr	r2, [pc, #164]	@ (8000c84 <main+0x110>)
 8000be0:	6013      	str	r3, [r2, #0]
		  if(buttonCount >= 5 && buttonCount < 8) {
 8000be2:	4b28      	ldr	r3, [pc, #160]	@ (8000c84 <main+0x110>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	d929      	bls.n	8000c3e <main+0xca>
 8000bea:	4b26      	ldr	r3, [pc, #152]	@ (8000c84 <main+0x110>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b07      	cmp	r3, #7
 8000bf0:	d825      	bhi.n	8000c3e <main+0xca>
			  SH1107_Unlock_Animation();
 8000bf2:	f7ff fde8 	bl	80007c6 <SH1107_Unlock_Animation>
			  SH1107_Set_Cursor(0, 0);
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f7ff fd7d 	bl	80006f8 <SH1107_Set_Cursor>
			  send_uart_message("FIVES!\r\n");
 8000bfe:	4822      	ldr	r0, [pc, #136]	@ (8000c88 <main+0x114>)
 8000c00:	f7ff fc9a 	bl	8000538 <send_uart_message>
			  servo_set_angle(90);   // Center
 8000c04:	205a      	movs	r0, #90	@ 0x5a
 8000c06:	f7ff fe09 	bl	800081c <servo_set_angle>
			  for(int i = 0; i < 5; i++) {
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	e012      	b.n	8000c36 <main+0xc2>
				  buzzer_on();
 8000c10:	f7ff fcb2 	bl	8000578 <buzzer_on>
				  HAL_Delay(100);
 8000c14:	2064      	movs	r0, #100	@ 0x64
 8000c16:	f000 fcbf 	bl	8001598 <HAL_Delay>
				  buzzer_off();
 8000c1a:	f7ff fcbb 	bl	8000594 <buzzer_off>
				  HAL_Delay(100);
 8000c1e:	2064      	movs	r0, #100	@ 0x64
 8000c20:	f000 fcba 	bl	8001598 <HAL_Delay>
				  servo_set_angle(20);
 8000c24:	2014      	movs	r0, #20
 8000c26:	f7ff fdf9 	bl	800081c <servo_set_angle>
				  HAL_Delay(100);
 8000c2a:	2064      	movs	r0, #100	@ 0x64
 8000c2c:	f000 fcb4 	bl	8001598 <HAL_Delay>
			  for(int i = 0; i < 5; i++) {
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3301      	adds	r3, #1
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b04      	cmp	r3, #4
 8000c3a:	dde9      	ble.n	8000c10 <main+0x9c>
 8000c3c:	e014      	b.n	8000c68 <main+0xf4>
			  }
		  } else {
			  buzzer_on();
 8000c3e:	f7ff fc9b 	bl	8000578 <buzzer_on>
			  HAL_Delay(100);
 8000c42:	2064      	movs	r0, #100	@ 0x64
 8000c44:	f000 fca8 	bl	8001598 <HAL_Delay>
			  buzzer_off();
 8000c48:	f7ff fca4 	bl	8000594 <buzzer_off>
			  send_uart_message("BUTTON!\r\n");
 8000c4c:	480f      	ldr	r0, [pc, #60]	@ (8000c8c <main+0x118>)
 8000c4e:	f7ff fc73 	bl	8000538 <send_uart_message>
			  servo_set_angle(180);  // Far right
 8000c52:	20b4      	movs	r0, #180	@ 0xb4
 8000c54:	f7ff fde2 	bl	800081c <servo_set_angle>
 8000c58:	e006      	b.n	8000c68 <main+0xf4>

		  }

	  } else {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2120      	movs	r1, #32
 8000c5e:	480c      	ldr	r0, [pc, #48]	@ (8000c90 <main+0x11c>)
 8000c60:	f000 ff40 	bl	8001ae4 <HAL_GPIO_WritePin>
		  buzzer_off();
 8000c64:	f7ff fc96 	bl	8000594 <buzzer_off>
	  }

	  if(buttonCount >= 8) {buttonCount = 0;}
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <main+0x110>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b07      	cmp	r3, #7
 8000c6e:	d99e      	bls.n	8000bae <main+0x3a>
 8000c70:	4b04      	ldr	r3, [pc, #16]	@ (8000c84 <main+0x110>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
	  keypad_password();
 8000c76:	e79a      	b.n	8000bae <main+0x3a>
 8000c78:	200000d0 	.word	0x200000d0
 8000c7c:	20000088 	.word	0x20000088
 8000c80:	40020800 	.word	0x40020800
 8000c84:	20000160 	.word	0x20000160
 8000c88:	08004070 	.word	0x08004070
 8000c8c:	0800407c 	.word	0x0800407c
 8000c90:	40020000 	.word	0x40020000

08000c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b094      	sub	sp, #80	@ 0x50
 8000c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9a:	f107 0320 	add.w	r3, r7, #32
 8000c9e:	2230      	movs	r2, #48	@ 0x30
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f003 f94e 	bl	8003f44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	4b29      	ldr	r3, [pc, #164]	@ (8000d64 <SystemClock_Config+0xd0>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc0:	4a28      	ldr	r2, [pc, #160]	@ (8000d64 <SystemClock_Config+0xd0>)
 8000cc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc8:	4b26      	ldr	r3, [pc, #152]	@ (8000d64 <SystemClock_Config+0xd0>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ccc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	4b23      	ldr	r3, [pc, #140]	@ (8000d68 <SystemClock_Config+0xd4>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ce0:	4a21      	ldr	r2, [pc, #132]	@ (8000d68 <SystemClock_Config+0xd4>)
 8000ce2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ce6:	6013      	str	r3, [r2, #0]
 8000ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d68 <SystemClock_Config+0xd4>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cfc:	2310      	movs	r3, #16
 8000cfe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d00:	2302      	movs	r3, #2
 8000d02:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d04:	2300      	movs	r3, #0
 8000d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000d08:	2310      	movs	r3, #16
 8000d0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d0c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000d10:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d12:	2304      	movs	r3, #4
 8000d14:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d16:	2307      	movs	r3, #7
 8000d18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1a:	f107 0320 	add.w	r3, r7, #32
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f001 fbb2 	bl	8002488 <HAL_RCC_OscConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d2a:	f000 fa01 	bl	8001130 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d2e:	230f      	movs	r3, #15
 8000d30:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d32:	2302      	movs	r3, #2
 8000d34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d3e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d44:	f107 030c 	add.w	r3, r7, #12
 8000d48:	2102      	movs	r1, #2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f001 fe14 	bl	8002978 <HAL_RCC_ClockConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000d56:	f000 f9eb 	bl	8001130 <Error_Handler>
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	3750      	adds	r7, #80	@ 0x50
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40007000 	.word	0x40007000

08000d6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d70:	4b12      	ldr	r3, [pc, #72]	@ (8000dbc <MX_I2C1_Init+0x50>)
 8000d72:	4a13      	ldr	r2, [pc, #76]	@ (8000dc0 <MX_I2C1_Init+0x54>)
 8000d74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d76:	4b11      	ldr	r3, [pc, #68]	@ (8000dbc <MX_I2C1_Init+0x50>)
 8000d78:	4a12      	ldr	r2, [pc, #72]	@ (8000dc4 <MX_I2C1_Init+0x58>)
 8000d7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <MX_I2C1_Init+0x50>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <MX_I2C1_Init+0x50>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <MX_I2C1_Init+0x50>)
 8000d8a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d90:	4b0a      	ldr	r3, [pc, #40]	@ (8000dbc <MX_I2C1_Init+0x50>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d96:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <MX_I2C1_Init+0x50>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d9c:	4b07      	ldr	r3, [pc, #28]	@ (8000dbc <MX_I2C1_Init+0x50>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000da2:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <MX_I2C1_Init+0x50>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000da8:	4804      	ldr	r0, [pc, #16]	@ (8000dbc <MX_I2C1_Init+0x50>)
 8000daa:	f000 fecf 	bl	8001b4c <HAL_I2C_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000db4:	f000 f9bc 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000034 	.word	0x20000034
 8000dc0:	40005400 	.word	0x40005400
 8000dc4:	000186a0 	.word	0x000186a0

08000dc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b092      	sub	sp, #72	@ 0x48
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
 8000de8:	615a      	str	r2, [r3, #20]
 8000dea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	2220      	movs	r2, #32
 8000df0:	2100      	movs	r1, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f003 f8a6 	bl	8003f44 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000df8:	4b33      	ldr	r3, [pc, #204]	@ (8000ec8 <MX_TIM1_Init+0x100>)
 8000dfa:	4a34      	ldr	r2, [pc, #208]	@ (8000ecc <MX_TIM1_Init+0x104>)
 8000dfc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8000dfe:	4b32      	ldr	r3, [pc, #200]	@ (8000ec8 <MX_TIM1_Init+0x100>)
 8000e00:	2253      	movs	r2, #83	@ 0x53
 8000e02:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e04:	4b30      	ldr	r3, [pc, #192]	@ (8000ec8 <MX_TIM1_Init+0x100>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8000e0a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ec8 <MX_TIM1_Init+0x100>)
 8000e0c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000e10:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e12:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec8 <MX_TIM1_Init+0x100>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e18:	4b2b      	ldr	r3, [pc, #172]	@ (8000ec8 <MX_TIM1_Init+0x100>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ec8 <MX_TIM1_Init+0x100>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e24:	4828      	ldr	r0, [pc, #160]	@ (8000ec8 <MX_TIM1_Init+0x100>)
 8000e26:	f001 ffc7 	bl	8002db8 <HAL_TIM_PWM_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000e30:	f000 f97e 	bl	8001130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e34:	2300      	movs	r3, #0
 8000e36:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e3c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e40:	4619      	mov	r1, r3
 8000e42:	4821      	ldr	r0, [pc, #132]	@ (8000ec8 <MX_TIM1_Init+0x100>)
 8000e44:	f002 fbb2 	bl	80035ac <HAL_TIMEx_MasterConfigSynchronization>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000e4e:	f000 f96f 	bl	8001130 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e52:	2360      	movs	r3, #96	@ 0x60
 8000e54:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1500;
 8000e56:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e60:	2300      	movs	r3, #0
 8000e62:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e74:	2204      	movs	r2, #4
 8000e76:	4619      	mov	r1, r3
 8000e78:	4813      	ldr	r0, [pc, #76]	@ (8000ec8 <MX_TIM1_Init+0x100>)
 8000e7a:	f002 f89d 	bl	8002fb8 <HAL_TIM_PWM_ConfigChannel>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000e84:	f000 f954 	bl	8001130 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ea0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4807      	ldr	r0, [pc, #28]	@ (8000ec8 <MX_TIM1_Init+0x100>)
 8000eac:	f002 fbec 	bl	8003688 <HAL_TIMEx_ConfigBreakDeadTime>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000eb6:	f000 f93b 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000eba:	4803      	ldr	r0, [pc, #12]	@ (8000ec8 <MX_TIM1_Init+0x100>)
 8000ebc:	f000 f9e6 	bl	800128c <HAL_TIM_MspPostInit>

}
 8000ec0:	bf00      	nop
 8000ec2:	3748      	adds	r7, #72	@ 0x48
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000088 	.word	0x20000088
 8000ecc:	40010000 	.word	0x40010000

08000ed0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	@ 0x28
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed6:	f107 0320 	add.w	r3, r7, #32
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
 8000eec:	611a      	str	r2, [r3, #16]
 8000eee:	615a      	str	r2, [r3, #20]
 8000ef0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ef2:	4b22      	ldr	r3, [pc, #136]	@ (8000f7c <MX_TIM3_Init+0xac>)
 8000ef4:	4a22      	ldr	r2, [pc, #136]	@ (8000f80 <MX_TIM3_Init+0xb0>)
 8000ef6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000ef8:	4b20      	ldr	r3, [pc, #128]	@ (8000f7c <MX_TIM3_Init+0xac>)
 8000efa:	2253      	movs	r2, #83	@ 0x53
 8000efc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efe:	4b1f      	ldr	r3, [pc, #124]	@ (8000f7c <MX_TIM3_Init+0xac>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 8000f04:	4b1d      	ldr	r3, [pc, #116]	@ (8000f7c <MX_TIM3_Init+0xac>)
 8000f06:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000f0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f7c <MX_TIM3_Init+0xac>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f12:	4b1a      	ldr	r3, [pc, #104]	@ (8000f7c <MX_TIM3_Init+0xac>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f18:	4818      	ldr	r0, [pc, #96]	@ (8000f7c <MX_TIM3_Init+0xac>)
 8000f1a:	f001 ff4d 	bl	8002db8 <HAL_TIM_PWM_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000f24:	f000 f904 	bl	8001130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f30:	f107 0320 	add.w	r3, r7, #32
 8000f34:	4619      	mov	r1, r3
 8000f36:	4811      	ldr	r0, [pc, #68]	@ (8000f7c <MX_TIM3_Init+0xac>)
 8000f38:	f002 fb38 	bl	80035ac <HAL_TIMEx_MasterConfigSynchronization>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000f42:	f000 f8f5 	bl	8001130 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f46:	2360      	movs	r3, #96	@ 0x60
 8000f48:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250;
 8000f4a:	23fa      	movs	r3, #250	@ 0xfa
 8000f4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2200      	movs	r2, #0
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4807      	ldr	r0, [pc, #28]	@ (8000f7c <MX_TIM3_Init+0xac>)
 8000f5e:	f002 f82b 	bl	8002fb8 <HAL_TIM_PWM_ConfigChannel>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000f68:	f000 f8e2 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f6c:	4803      	ldr	r0, [pc, #12]	@ (8000f7c <MX_TIM3_Init+0xac>)
 8000f6e:	f000 f98d 	bl	800128c <HAL_TIM_MspPostInit>

}
 8000f72:	bf00      	nop
 8000f74:	3728      	adds	r7, #40	@ 0x28
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200000d0 	.word	0x200000d0
 8000f80:	40000400 	.word	0x40000400

08000f84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f88:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <MX_USART2_UART_Init+0x4c>)
 8000f8a:	4a12      	ldr	r2, [pc, #72]	@ (8000fd4 <MX_USART2_UART_Init+0x50>)
 8000f8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f8e:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <MX_USART2_UART_Init+0x4c>)
 8000f90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd0 <MX_USART2_UART_Init+0x4c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd0 <MX_USART2_UART_Init+0x4c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd0 <MX_USART2_UART_Init+0x4c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	@ (8000fd0 <MX_USART2_UART_Init+0x4c>)
 8000faa:	220c      	movs	r2, #12
 8000fac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fae:	4b08      	ldr	r3, [pc, #32]	@ (8000fd0 <MX_USART2_UART_Init+0x4c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <MX_USART2_UART_Init+0x4c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fba:	4805      	ldr	r0, [pc, #20]	@ (8000fd0 <MX_USART2_UART_Init+0x4c>)
 8000fbc:	f002 fbb6 	bl	800372c <HAL_UART_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fc6:	f000 f8b3 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000118 	.word	0x20000118
 8000fd4:	40004400 	.word	0x40004400

08000fd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	@ 0x28
 8000fdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	4b4b      	ldr	r3, [pc, #300]	@ (8001120 <MX_GPIO_Init+0x148>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	4a4a      	ldr	r2, [pc, #296]	@ (8001120 <MX_GPIO_Init+0x148>)
 8000ff8:	f043 0304 	orr.w	r3, r3, #4
 8000ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffe:	4b48      	ldr	r3, [pc, #288]	@ (8001120 <MX_GPIO_Init+0x148>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	f003 0304 	and.w	r3, r3, #4
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	4b44      	ldr	r3, [pc, #272]	@ (8001120 <MX_GPIO_Init+0x148>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4a43      	ldr	r2, [pc, #268]	@ (8001120 <MX_GPIO_Init+0x148>)
 8001014:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4b41      	ldr	r3, [pc, #260]	@ (8001120 <MX_GPIO_Init+0x148>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	4b3d      	ldr	r3, [pc, #244]	@ (8001120 <MX_GPIO_Init+0x148>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a3c      	ldr	r2, [pc, #240]	@ (8001120 <MX_GPIO_Init+0x148>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b3a      	ldr	r3, [pc, #232]	@ (8001120 <MX_GPIO_Init+0x148>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	4b36      	ldr	r3, [pc, #216]	@ (8001120 <MX_GPIO_Init+0x148>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a35      	ldr	r2, [pc, #212]	@ (8001120 <MX_GPIO_Init+0x148>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b33      	ldr	r3, [pc, #204]	@ (8001120 <MX_GPIO_Init+0x148>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8001064:	482f      	ldr	r0, [pc, #188]	@ (8001124 <MX_GPIO_Init+0x14c>)
 8001066:	f000 fd3d 	bl	8001ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 8001070:	482d      	ldr	r0, [pc, #180]	@ (8001128 <MX_GPIO_Init+0x150>)
 8001072:	f000 fd37 	bl	8001ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001076:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800107a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800107c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001080:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	4619      	mov	r1, r3
 800108c:	4827      	ldr	r0, [pc, #156]	@ (800112c <MX_GPIO_Init+0x154>)
 800108e:	f000 fb8d 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001092:	2303      	movs	r3, #3
 8001094:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800109a:	2301      	movs	r3, #1
 800109c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	4619      	mov	r1, r3
 80010a4:	4821      	ldr	r0, [pc, #132]	@ (800112c <MX_GPIO_Init+0x154>)
 80010a6:	f000 fb81 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 80010aa:	2390      	movs	r3, #144	@ 0x90
 80010ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	4619      	mov	r1, r3
 80010bc:	4819      	ldr	r0, [pc, #100]	@ (8001124 <MX_GPIO_Init+0x14c>)
 80010be:	f000 fb75 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 80010c2:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80010c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c8:	2301      	movs	r3, #1
 80010ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2300      	movs	r3, #0
 80010d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	4619      	mov	r1, r3
 80010da:	4812      	ldr	r0, [pc, #72]	@ (8001124 <MX_GPIO_Init+0x14c>)
 80010dc:	f000 fb66 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010e0:	2301      	movs	r3, #1
 80010e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	4619      	mov	r1, r3
 80010f2:	480d      	ldr	r0, [pc, #52]	@ (8001128 <MX_GPIO_Init+0x150>)
 80010f4:	f000 fb5a 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 80010f8:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 80010fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fe:	2301      	movs	r3, #1
 8001100:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	4805      	ldr	r0, [pc, #20]	@ (8001128 <MX_GPIO_Init+0x150>)
 8001112:	f000 fb4b 	bl	80017ac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001116:	bf00      	nop
 8001118:	3728      	adds	r7, #40	@ 0x28
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40023800 	.word	0x40023800
 8001124:	40020000 	.word	0x40020000
 8001128:	40020400 	.word	0x40020400
 800112c:	40020800 	.word	0x40020800

08001130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001134:	b672      	cpsid	i
}
 8001136:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <Error_Handler+0x8>

0800113c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	4b10      	ldr	r3, [pc, #64]	@ (8001188 <HAL_MspInit+0x4c>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114a:	4a0f      	ldr	r2, [pc, #60]	@ (8001188 <HAL_MspInit+0x4c>)
 800114c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001150:	6453      	str	r3, [r2, #68]	@ 0x44
 8001152:	4b0d      	ldr	r3, [pc, #52]	@ (8001188 <HAL_MspInit+0x4c>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001156:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	603b      	str	r3, [r7, #0]
 8001162:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <HAL_MspInit+0x4c>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001166:	4a08      	ldr	r2, [pc, #32]	@ (8001188 <HAL_MspInit+0x4c>)
 8001168:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800116c:	6413      	str	r3, [r2, #64]	@ 0x40
 800116e:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <HAL_MspInit+0x4c>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800

0800118c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	@ 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a19      	ldr	r2, [pc, #100]	@ (8001210 <HAL_I2C_MspInit+0x84>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d12c      	bne.n	8001208 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	4b18      	ldr	r3, [pc, #96]	@ (8001214 <HAL_I2C_MspInit+0x88>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	4a17      	ldr	r2, [pc, #92]	@ (8001214 <HAL_I2C_MspInit+0x88>)
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011be:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <HAL_I2C_MspInit+0x88>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d0:	2312      	movs	r3, #18
 80011d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d8:	2303      	movs	r3, #3
 80011da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011dc:	2304      	movs	r3, #4
 80011de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	480c      	ldr	r0, [pc, #48]	@ (8001218 <HAL_I2C_MspInit+0x8c>)
 80011e8:	f000 fae0 	bl	80017ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <HAL_I2C_MspInit+0x88>)
 80011f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f4:	4a07      	ldr	r2, [pc, #28]	@ (8001214 <HAL_I2C_MspInit+0x88>)
 80011f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80011fc:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <HAL_I2C_MspInit+0x88>)
 80011fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001200:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001208:	bf00      	nop
 800120a:	3728      	adds	r7, #40	@ 0x28
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40005400 	.word	0x40005400
 8001214:	40023800 	.word	0x40023800
 8001218:	40020400 	.word	0x40020400

0800121c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a15      	ldr	r2, [pc, #84]	@ (8001280 <HAL_TIM_PWM_MspInit+0x64>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d10e      	bne.n	800124c <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b14      	ldr	r3, [pc, #80]	@ (8001284 <HAL_TIM_PWM_MspInit+0x68>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001236:	4a13      	ldr	r2, [pc, #76]	@ (8001284 <HAL_TIM_PWM_MspInit+0x68>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6453      	str	r3, [r2, #68]	@ 0x44
 800123e:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <HAL_TIM_PWM_MspInit+0x68>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 800124a:	e012      	b.n	8001272 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0d      	ldr	r2, [pc, #52]	@ (8001288 <HAL_TIM_PWM_MspInit+0x6c>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d10d      	bne.n	8001272 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <HAL_TIM_PWM_MspInit+0x68>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125e:	4a09      	ldr	r2, [pc, #36]	@ (8001284 <HAL_TIM_PWM_MspInit+0x68>)
 8001260:	f043 0302 	orr.w	r3, r3, #2
 8001264:	6413      	str	r3, [r2, #64]	@ 0x40
 8001266:	4b07      	ldr	r3, [pc, #28]	@ (8001284 <HAL_TIM_PWM_MspInit+0x68>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
}
 8001272:	bf00      	nop
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40010000 	.word	0x40010000
 8001284:	40023800 	.word	0x40023800
 8001288:	40000400 	.word	0x40000400

0800128c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	@ 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a24      	ldr	r2, [pc, #144]	@ (800133c <HAL_TIM_MspPostInit+0xb0>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d11f      	bne.n	80012ee <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b23      	ldr	r3, [pc, #140]	@ (8001340 <HAL_TIM_MspPostInit+0xb4>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	4a22      	ldr	r2, [pc, #136]	@ (8001340 <HAL_TIM_MspPostInit+0xb4>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012be:	4b20      	ldr	r3, [pc, #128]	@ (8001340 <HAL_TIM_MspPostInit+0xb4>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012dc:	2301      	movs	r3, #1
 80012de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4619      	mov	r1, r3
 80012e6:	4817      	ldr	r0, [pc, #92]	@ (8001344 <HAL_TIM_MspPostInit+0xb8>)
 80012e8:	f000 fa60 	bl	80017ac <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80012ec:	e022      	b.n	8001334 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a15      	ldr	r2, [pc, #84]	@ (8001348 <HAL_TIM_MspPostInit+0xbc>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d11d      	bne.n	8001334 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	4b10      	ldr	r3, [pc, #64]	@ (8001340 <HAL_TIM_MspPostInit+0xb4>)
 80012fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001300:	4a0f      	ldr	r2, [pc, #60]	@ (8001340 <HAL_TIM_MspPostInit+0xb4>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	6313      	str	r3, [r2, #48]	@ 0x30
 8001308:	4b0d      	ldr	r3, [pc, #52]	@ (8001340 <HAL_TIM_MspPostInit+0xb4>)
 800130a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001314:	2340      	movs	r3, #64	@ 0x40
 8001316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
 800131a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	2300      	movs	r3, #0
 8001322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001324:	2302      	movs	r3, #2
 8001326:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4619      	mov	r1, r3
 800132e:	4805      	ldr	r0, [pc, #20]	@ (8001344 <HAL_TIM_MspPostInit+0xb8>)
 8001330:	f000 fa3c 	bl	80017ac <HAL_GPIO_Init>
}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	@ 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40010000 	.word	0x40010000
 8001340:	40023800 	.word	0x40023800
 8001344:	40020000 	.word	0x40020000
 8001348:	40000400 	.word	0x40000400

0800134c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	@ 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a19      	ldr	r2, [pc, #100]	@ (80013d0 <HAL_UART_MspInit+0x84>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d12b      	bne.n	80013c6 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b18      	ldr	r3, [pc, #96]	@ (80013d4 <HAL_UART_MspInit+0x88>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	4a17      	ldr	r2, [pc, #92]	@ (80013d4 <HAL_UART_MspInit+0x88>)
 8001378:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800137c:	6413      	str	r3, [r2, #64]	@ 0x40
 800137e:	4b15      	ldr	r3, [pc, #84]	@ (80013d4 <HAL_UART_MspInit+0x88>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <HAL_UART_MspInit+0x88>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	4a10      	ldr	r2, [pc, #64]	@ (80013d4 <HAL_UART_MspInit+0x88>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6313      	str	r3, [r2, #48]	@ 0x30
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <HAL_UART_MspInit+0x88>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013a6:	230c      	movs	r3, #12
 80013a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013b6:	2307      	movs	r3, #7
 80013b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	4805      	ldr	r0, [pc, #20]	@ (80013d8 <HAL_UART_MspInit+0x8c>)
 80013c2:	f000 f9f3 	bl	80017ac <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80013c6:	bf00      	nop
 80013c8:	3728      	adds	r7, #40	@ 0x28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40004400 	.word	0x40004400
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020000 	.word	0x40020000

080013dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <NMI_Handler+0x4>

080013e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <HardFault_Handler+0x4>

080013ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <MemManage_Handler+0x4>

080013f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <BusFault_Handler+0x4>

080013fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <UsageFault_Handler+0x4>

08001404 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001432:	f000 f891 	bl	8001558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001440:	4b06      	ldr	r3, [pc, #24]	@ (800145c <SystemInit+0x20>)
 8001442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001446:	4a05      	ldr	r2, [pc, #20]	@ (800145c <SystemInit+0x20>)
 8001448:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800144c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001460:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001498 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001464:	f7ff ffea 	bl	800143c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001468:	480c      	ldr	r0, [pc, #48]	@ (800149c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800146a:	490d      	ldr	r1, [pc, #52]	@ (80014a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800146c:	4a0d      	ldr	r2, [pc, #52]	@ (80014a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800146e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001470:	e002      	b.n	8001478 <LoopCopyDataInit>

08001472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001476:	3304      	adds	r3, #4

08001478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800147c:	d3f9      	bcc.n	8001472 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800147e:	4a0a      	ldr	r2, [pc, #40]	@ (80014a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001480:	4c0a      	ldr	r4, [pc, #40]	@ (80014ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001484:	e001      	b.n	800148a <LoopFillZerobss>

08001486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001488:	3204      	adds	r2, #4

0800148a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800148c:	d3fb      	bcc.n	8001486 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800148e:	f002 fd61 	bl	8003f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001492:	f7ff fb6f 	bl	8000b74 <main>
  bx  lr    
 8001496:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001498:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800149c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80014a4:	080041d8 	.word	0x080041d8
  ldr r2, =_sbss
 80014a8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80014ac:	20000174 	.word	0x20000174

080014b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014b0:	e7fe      	b.n	80014b0 <ADC_IRQHandler>
	...

080014b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014b8:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <HAL_Init+0x40>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0d      	ldr	r2, [pc, #52]	@ (80014f4 <HAL_Init+0x40>)
 80014be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014c4:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <HAL_Init+0x40>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0a      	ldr	r2, [pc, #40]	@ (80014f4 <HAL_Init+0x40>)
 80014ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d0:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <HAL_Init+0x40>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a07      	ldr	r2, [pc, #28]	@ (80014f4 <HAL_Init+0x40>)
 80014d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014dc:	2003      	movs	r0, #3
 80014de:	f000 f931 	bl	8001744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014e2:	2000      	movs	r0, #0
 80014e4:	f000 f808 	bl	80014f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e8:	f7ff fe28 	bl	800113c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40023c00 	.word	0x40023c00

080014f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001500:	4b12      	ldr	r3, [pc, #72]	@ (800154c <HAL_InitTick+0x54>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <HAL_InitTick+0x58>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4619      	mov	r1, r3
 800150a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800150e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001512:	fbb2 f3f3 	udiv	r3, r2, r3
 8001516:	4618      	mov	r0, r3
 8001518:	f000 f93b 	bl	8001792 <HAL_SYSTICK_Config>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e00e      	b.n	8001544 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b0f      	cmp	r3, #15
 800152a:	d80a      	bhi.n	8001542 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800152c:	2200      	movs	r2, #0
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	f04f 30ff 	mov.w	r0, #4294967295
 8001534:	f000 f911 	bl	800175a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001538:	4a06      	ldr	r2, [pc, #24]	@ (8001554 <HAL_InitTick+0x5c>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800153e:	2300      	movs	r3, #0
 8001540:	e000      	b.n	8001544 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	2000000c 	.word	0x2000000c
 8001550:	20000014 	.word	0x20000014
 8001554:	20000010 	.word	0x20000010

08001558 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800155c:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_IncTick+0x20>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	461a      	mov	r2, r3
 8001562:	4b06      	ldr	r3, [pc, #24]	@ (800157c <HAL_IncTick+0x24>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4413      	add	r3, r2
 8001568:	4a04      	ldr	r2, [pc, #16]	@ (800157c <HAL_IncTick+0x24>)
 800156a:	6013      	str	r3, [r2, #0]
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	20000014 	.word	0x20000014
 800157c:	20000170 	.word	0x20000170

08001580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return uwTick;
 8001584:	4b03      	ldr	r3, [pc, #12]	@ (8001594 <HAL_GetTick+0x14>)
 8001586:	681b      	ldr	r3, [r3, #0]
}
 8001588:	4618      	mov	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	20000170 	.word	0x20000170

08001598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a0:	f7ff ffee 	bl	8001580 <HAL_GetTick>
 80015a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b0:	d005      	beq.n	80015be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015b2:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <HAL_Delay+0x44>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	461a      	mov	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4413      	add	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015be:	bf00      	nop
 80015c0:	f7ff ffde 	bl	8001580 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d8f7      	bhi.n	80015c0 <HAL_Delay+0x28>
  {
  }
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000014 	.word	0x20000014

080015e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015fc:	4013      	ands	r3, r2
 80015fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001608:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800160c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001612:	4a04      	ldr	r2, [pc, #16]	@ (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	60d3      	str	r3, [r2, #12]
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800162c:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <__NVIC_GetPriorityGrouping+0x18>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	f003 0307 	and.w	r3, r3, #7
}
 8001636:	4618      	mov	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	6039      	str	r1, [r7, #0]
 800164e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001654:	2b00      	cmp	r3, #0
 8001656:	db0a      	blt.n	800166e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	b2da      	uxtb	r2, r3
 800165c:	490c      	ldr	r1, [pc, #48]	@ (8001690 <__NVIC_SetPriority+0x4c>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	0112      	lsls	r2, r2, #4
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	440b      	add	r3, r1
 8001668:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800166c:	e00a      	b.n	8001684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4908      	ldr	r1, [pc, #32]	@ (8001694 <__NVIC_SetPriority+0x50>)
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	3b04      	subs	r3, #4
 800167c:	0112      	lsls	r2, r2, #4
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	440b      	add	r3, r1
 8001682:	761a      	strb	r2, [r3, #24]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000e100 	.word	0xe000e100
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001698:	b480      	push	{r7}
 800169a:	b089      	sub	sp, #36	@ 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f1c3 0307 	rsb	r3, r3, #7
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	bf28      	it	cs
 80016b6:	2304      	movcs	r3, #4
 80016b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3304      	adds	r3, #4
 80016be:	2b06      	cmp	r3, #6
 80016c0:	d902      	bls.n	80016c8 <NVIC_EncodePriority+0x30>
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3b03      	subs	r3, #3
 80016c6:	e000      	b.n	80016ca <NVIC_EncodePriority+0x32>
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016cc:	f04f 32ff 	mov.w	r2, #4294967295
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43da      	mvns	r2, r3
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	401a      	ands	r2, r3
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e0:	f04f 31ff 	mov.w	r1, #4294967295
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ea:	43d9      	mvns	r1, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	4313      	orrs	r3, r2
         );
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3724      	adds	r7, #36	@ 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001710:	d301      	bcc.n	8001716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001712:	2301      	movs	r3, #1
 8001714:	e00f      	b.n	8001736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001716:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <SysTick_Config+0x40>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3b01      	subs	r3, #1
 800171c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171e:	210f      	movs	r1, #15
 8001720:	f04f 30ff 	mov.w	r0, #4294967295
 8001724:	f7ff ff8e 	bl	8001644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001728:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <SysTick_Config+0x40>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172e:	4b04      	ldr	r3, [pc, #16]	@ (8001740 <SysTick_Config+0x40>)
 8001730:	2207      	movs	r2, #7
 8001732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	e000e010 	.word	0xe000e010

08001744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff ff47 	bl	80015e0 <__NVIC_SetPriorityGrouping>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800175a:	b580      	push	{r7, lr}
 800175c:	b086      	sub	sp, #24
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
 8001766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800176c:	f7ff ff5c 	bl	8001628 <__NVIC_GetPriorityGrouping>
 8001770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	6978      	ldr	r0, [r7, #20]
 8001778:	f7ff ff8e 	bl	8001698 <NVIC_EncodePriority>
 800177c:	4602      	mov	r2, r0
 800177e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001782:	4611      	mov	r1, r2
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff5d 	bl	8001644 <__NVIC_SetPriority>
}
 800178a:	bf00      	nop
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff ffb0 	bl	8001700 <SysTick_Config>
 80017a0:	4603      	mov	r3, r0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b089      	sub	sp, #36	@ 0x24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017be:	2300      	movs	r3, #0
 80017c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
 80017c6:	e159      	b.n	8001a7c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017c8:	2201      	movs	r2, #1
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	4013      	ands	r3, r2
 80017da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	f040 8148 	bne.w	8001a76 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f003 0303 	and.w	r3, r3, #3
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d005      	beq.n	80017fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d130      	bne.n	8001860 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	2203      	movs	r2, #3
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4013      	ands	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	68da      	ldr	r2, [r3, #12]
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4313      	orrs	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001834:	2201      	movs	r2, #1
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	091b      	lsrs	r3, r3, #4
 800184a:	f003 0201 	and.w	r2, r3, #1
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4313      	orrs	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	2b03      	cmp	r3, #3
 800186a:	d017      	beq.n	800189c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	2203      	movs	r2, #3
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d123      	bne.n	80018f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	08da      	lsrs	r2, r3, #3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3208      	adds	r2, #8
 80018b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	220f      	movs	r2, #15
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	691a      	ldr	r2, [r3, #16]
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	08da      	lsrs	r2, r3, #3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3208      	adds	r2, #8
 80018ea:	69b9      	ldr	r1, [r7, #24]
 80018ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	2203      	movs	r2, #3
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 0203 	and.w	r2, r3, #3
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4313      	orrs	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 80a2 	beq.w	8001a76 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	4b57      	ldr	r3, [pc, #348]	@ (8001a94 <HAL_GPIO_Init+0x2e8>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193a:	4a56      	ldr	r2, [pc, #344]	@ (8001a94 <HAL_GPIO_Init+0x2e8>)
 800193c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001940:	6453      	str	r3, [r2, #68]	@ 0x44
 8001942:	4b54      	ldr	r3, [pc, #336]	@ (8001a94 <HAL_GPIO_Init+0x2e8>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001946:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800194e:	4a52      	ldr	r2, [pc, #328]	@ (8001a98 <HAL_GPIO_Init+0x2ec>)
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	089b      	lsrs	r3, r3, #2
 8001954:	3302      	adds	r3, #2
 8001956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	220f      	movs	r2, #15
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43db      	mvns	r3, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4013      	ands	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a49      	ldr	r2, [pc, #292]	@ (8001a9c <HAL_GPIO_Init+0x2f0>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d019      	beq.n	80019ae <HAL_GPIO_Init+0x202>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a48      	ldr	r2, [pc, #288]	@ (8001aa0 <HAL_GPIO_Init+0x2f4>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d013      	beq.n	80019aa <HAL_GPIO_Init+0x1fe>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a47      	ldr	r2, [pc, #284]	@ (8001aa4 <HAL_GPIO_Init+0x2f8>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d00d      	beq.n	80019a6 <HAL_GPIO_Init+0x1fa>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a46      	ldr	r2, [pc, #280]	@ (8001aa8 <HAL_GPIO_Init+0x2fc>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d007      	beq.n	80019a2 <HAL_GPIO_Init+0x1f6>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a45      	ldr	r2, [pc, #276]	@ (8001aac <HAL_GPIO_Init+0x300>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d101      	bne.n	800199e <HAL_GPIO_Init+0x1f2>
 800199a:	2304      	movs	r3, #4
 800199c:	e008      	b.n	80019b0 <HAL_GPIO_Init+0x204>
 800199e:	2307      	movs	r3, #7
 80019a0:	e006      	b.n	80019b0 <HAL_GPIO_Init+0x204>
 80019a2:	2303      	movs	r3, #3
 80019a4:	e004      	b.n	80019b0 <HAL_GPIO_Init+0x204>
 80019a6:	2302      	movs	r3, #2
 80019a8:	e002      	b.n	80019b0 <HAL_GPIO_Init+0x204>
 80019aa:	2301      	movs	r3, #1
 80019ac:	e000      	b.n	80019b0 <HAL_GPIO_Init+0x204>
 80019ae:	2300      	movs	r3, #0
 80019b0:	69fa      	ldr	r2, [r7, #28]
 80019b2:	f002 0203 	and.w	r2, r2, #3
 80019b6:	0092      	lsls	r2, r2, #2
 80019b8:	4093      	lsls	r3, r2
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4313      	orrs	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019c0:	4935      	ldr	r1, [pc, #212]	@ (8001a98 <HAL_GPIO_Init+0x2ec>)
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	089b      	lsrs	r3, r3, #2
 80019c6:	3302      	adds	r3, #2
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ce:	4b38      	ldr	r3, [pc, #224]	@ (8001ab0 <HAL_GPIO_Init+0x304>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4013      	ands	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019f2:	4a2f      	ldr	r2, [pc, #188]	@ (8001ab0 <HAL_GPIO_Init+0x304>)
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019f8:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab0 <HAL_GPIO_Init+0x304>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a1c:	4a24      	ldr	r2, [pc, #144]	@ (8001ab0 <HAL_GPIO_Init+0x304>)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a22:	4b23      	ldr	r3, [pc, #140]	@ (8001ab0 <HAL_GPIO_Init+0x304>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a46:	4a1a      	ldr	r2, [pc, #104]	@ (8001ab0 <HAL_GPIO_Init+0x304>)
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a4c:	4b18      	ldr	r3, [pc, #96]	@ (8001ab0 <HAL_GPIO_Init+0x304>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a70:	4a0f      	ldr	r2, [pc, #60]	@ (8001ab0 <HAL_GPIO_Init+0x304>)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	61fb      	str	r3, [r7, #28]
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	2b0f      	cmp	r3, #15
 8001a80:	f67f aea2 	bls.w	80017c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a84:	bf00      	nop
 8001a86:	bf00      	nop
 8001a88:	3724      	adds	r7, #36	@ 0x24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40013800 	.word	0x40013800
 8001a9c:	40020000 	.word	0x40020000
 8001aa0:	40020400 	.word	0x40020400
 8001aa4:	40020800 	.word	0x40020800
 8001aa8:	40020c00 	.word	0x40020c00
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40013c00 	.word	0x40013c00

08001ab4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691a      	ldr	r2, [r3, #16]
 8001ac4:	887b      	ldrh	r3, [r7, #2]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d002      	beq.n	8001ad2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001acc:	2301      	movs	r3, #1
 8001ace:	73fb      	strb	r3, [r7, #15]
 8001ad0:	e001      	b.n	8001ad6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	807b      	strh	r3, [r7, #2]
 8001af0:	4613      	mov	r3, r2
 8001af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001af4:	787b      	ldrb	r3, [r7, #1]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001afa:	887a      	ldrh	r2, [r7, #2]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b00:	e003      	b.n	8001b0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b02:	887b      	ldrh	r3, [r7, #2]
 8001b04:	041a      	lsls	r2, r3, #16
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	619a      	str	r2, [r3, #24]
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b085      	sub	sp, #20
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	460b      	mov	r3, r1
 8001b20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b28:	887a      	ldrh	r2, [r7, #2]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	041a      	lsls	r2, r3, #16
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	43d9      	mvns	r1, r3
 8001b34:	887b      	ldrh	r3, [r7, #2]
 8001b36:	400b      	ands	r3, r1
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	619a      	str	r2, [r3, #24]
}
 8001b3e:	bf00      	nop
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e12b      	b.n	8001db6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d106      	bne.n	8001b78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff fb0a 	bl	800118c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2224      	movs	r2, #36	@ 0x24
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 0201 	bic.w	r2, r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001bae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bb0:	f001 f8da 	bl	8002d68 <HAL_RCC_GetPCLK1Freq>
 8001bb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4a81      	ldr	r2, [pc, #516]	@ (8001dc0 <HAL_I2C_Init+0x274>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d807      	bhi.n	8001bd0 <HAL_I2C_Init+0x84>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4a80      	ldr	r2, [pc, #512]	@ (8001dc4 <HAL_I2C_Init+0x278>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	bf94      	ite	ls
 8001bc8:	2301      	movls	r3, #1
 8001bca:	2300      	movhi	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	e006      	b.n	8001bde <HAL_I2C_Init+0x92>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4a7d      	ldr	r2, [pc, #500]	@ (8001dc8 <HAL_I2C_Init+0x27c>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	bf94      	ite	ls
 8001bd8:	2301      	movls	r3, #1
 8001bda:	2300      	movhi	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e0e7      	b.n	8001db6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4a78      	ldr	r2, [pc, #480]	@ (8001dcc <HAL_I2C_Init+0x280>)
 8001bea:	fba2 2303 	umull	r2, r3, r2, r3
 8001bee:	0c9b      	lsrs	r3, r3, #18
 8001bf0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	4a6a      	ldr	r2, [pc, #424]	@ (8001dc0 <HAL_I2C_Init+0x274>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d802      	bhi.n	8001c20 <HAL_I2C_Init+0xd4>
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	e009      	b.n	8001c34 <HAL_I2C_Init+0xe8>
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001c26:	fb02 f303 	mul.w	r3, r2, r3
 8001c2a:	4a69      	ldr	r2, [pc, #420]	@ (8001dd0 <HAL_I2C_Init+0x284>)
 8001c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c30:	099b      	lsrs	r3, r3, #6
 8001c32:	3301      	adds	r3, #1
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	430b      	orrs	r3, r1
 8001c3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001c46:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	495c      	ldr	r1, [pc, #368]	@ (8001dc0 <HAL_I2C_Init+0x274>)
 8001c50:	428b      	cmp	r3, r1
 8001c52:	d819      	bhi.n	8001c88 <HAL_I2C_Init+0x13c>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	1e59      	subs	r1, r3, #1
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c62:	1c59      	adds	r1, r3, #1
 8001c64:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001c68:	400b      	ands	r3, r1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00a      	beq.n	8001c84 <HAL_I2C_Init+0x138>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	1e59      	subs	r1, r3, #1
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c82:	e051      	b.n	8001d28 <HAL_I2C_Init+0x1dc>
 8001c84:	2304      	movs	r3, #4
 8001c86:	e04f      	b.n	8001d28 <HAL_I2C_Init+0x1dc>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d111      	bne.n	8001cb4 <HAL_I2C_Init+0x168>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	1e58      	subs	r0, r3, #1
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6859      	ldr	r1, [r3, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	440b      	add	r3, r1
 8001c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	bf0c      	ite	eq
 8001cac:	2301      	moveq	r3, #1
 8001cae:	2300      	movne	r3, #0
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	e012      	b.n	8001cda <HAL_I2C_Init+0x18e>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	1e58      	subs	r0, r3, #1
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6859      	ldr	r1, [r3, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	0099      	lsls	r1, r3, #2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	bf0c      	ite	eq
 8001cd4:	2301      	moveq	r3, #1
 8001cd6:	2300      	movne	r3, #0
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_I2C_Init+0x196>
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e022      	b.n	8001d28 <HAL_I2C_Init+0x1dc>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10e      	bne.n	8001d08 <HAL_I2C_Init+0x1bc>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	1e58      	subs	r0, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6859      	ldr	r1, [r3, #4]
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	440b      	add	r3, r1
 8001cf8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d06:	e00f      	b.n	8001d28 <HAL_I2C_Init+0x1dc>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	1e58      	subs	r0, r3, #1
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6859      	ldr	r1, [r3, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	440b      	add	r3, r1
 8001d16:	0099      	lsls	r1, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d1e:	3301      	adds	r3, #1
 8001d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	6809      	ldr	r1, [r1, #0]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69da      	ldr	r2, [r3, #28]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	431a      	orrs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001d56:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6911      	ldr	r1, [r2, #16]
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68d2      	ldr	r2, [r2, #12]
 8001d62:	4311      	orrs	r1, r2
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	430b      	orrs	r3, r1
 8001d6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	695a      	ldr	r2, [r3, #20]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0201 	orr.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2220      	movs	r2, #32
 8001da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	000186a0 	.word	0x000186a0
 8001dc4:	001e847f 	.word	0x001e847f
 8001dc8:	003d08ff 	.word	0x003d08ff
 8001dcc:	431bde83 	.word	0x431bde83
 8001dd0:	10624dd3 	.word	0x10624dd3

08001dd4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af02      	add	r7, sp, #8
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	607a      	str	r2, [r7, #4]
 8001dde:	461a      	mov	r2, r3
 8001de0:	460b      	mov	r3, r1
 8001de2:	817b      	strh	r3, [r7, #10]
 8001de4:	4613      	mov	r3, r2
 8001de6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001de8:	f7ff fbca 	bl	8001580 <HAL_GetTick>
 8001dec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b20      	cmp	r3, #32
 8001df8:	f040 80e0 	bne.w	8001fbc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	2319      	movs	r3, #25
 8001e02:	2201      	movs	r2, #1
 8001e04:	4970      	ldr	r1, [pc, #448]	@ (8001fc8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 f964 	bl	80020d4 <I2C_WaitOnFlagUntilTimeout>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e12:	2302      	movs	r3, #2
 8001e14:	e0d3      	b.n	8001fbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_I2C_Master_Transmit+0x50>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e0cc      	b.n	8001fbe <HAL_I2C_Master_Transmit+0x1ea>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d007      	beq.n	8001e4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f042 0201 	orr.w	r2, r2, #1
 8001e48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2221      	movs	r2, #33	@ 0x21
 8001e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2210      	movs	r2, #16
 8001e66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	893a      	ldrh	r2, [r7, #8]
 8001e7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	4a50      	ldr	r2, [pc, #320]	@ (8001fcc <HAL_I2C_Master_Transmit+0x1f8>)
 8001e8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e8c:	8979      	ldrh	r1, [r7, #10]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	6a3a      	ldr	r2, [r7, #32]
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 f89c 	bl	8001fd0 <I2C_MasterRequestWrite>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e08d      	b.n	8001fbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001eb8:	e066      	b.n	8001f88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	6a39      	ldr	r1, [r7, #32]
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f000 fa22 	bl	8002308 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00d      	beq.n	8001ee6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d107      	bne.n	8001ee2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ee0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e06b      	b.n	8001fbe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eea:	781a      	ldrb	r2, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	3b01      	subs	r3, #1
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d11b      	bne.n	8001f5c <HAL_I2C_Master_Transmit+0x188>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d017      	beq.n	8001f5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f30:	781a      	ldrb	r2, [r3, #0]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f54:	3b01      	subs	r3, #1
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	6a39      	ldr	r1, [r7, #32]
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f000 fa19 	bl	8002398 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00d      	beq.n	8001f88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d107      	bne.n	8001f84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e01a      	b.n	8001fbe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d194      	bne.n	8001eba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	e000      	b.n	8001fbe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001fbc:	2302      	movs	r3, #2
  }
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	00100002 	.word	0x00100002
 8001fcc:	ffff0000 	.word	0xffff0000

08001fd0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af02      	add	r7, sp, #8
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	607a      	str	r2, [r7, #4]
 8001fda:	603b      	str	r3, [r7, #0]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d006      	beq.n	8001ffa <I2C_MasterRequestWrite+0x2a>
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d003      	beq.n	8001ffa <I2C_MasterRequestWrite+0x2a>
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001ff8:	d108      	bne.n	800200c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	e00b      	b.n	8002024 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002010:	2b12      	cmp	r3, #18
 8002012:	d107      	bne.n	8002024 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002022:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 f84f 	bl	80020d4 <I2C_WaitOnFlagUntilTimeout>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00d      	beq.n	8002058 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002046:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800204a:	d103      	bne.n	8002054 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002052:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e035      	b.n	80020c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002060:	d108      	bne.n	8002074 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002062:	897b      	ldrh	r3, [r7, #10]
 8002064:	b2db      	uxtb	r3, r3
 8002066:	461a      	mov	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002070:	611a      	str	r2, [r3, #16]
 8002072:	e01b      	b.n	80020ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002074:	897b      	ldrh	r3, [r7, #10]
 8002076:	11db      	asrs	r3, r3, #7
 8002078:	b2db      	uxtb	r3, r3
 800207a:	f003 0306 	and.w	r3, r3, #6
 800207e:	b2db      	uxtb	r3, r3
 8002080:	f063 030f 	orn	r3, r3, #15
 8002084:	b2da      	uxtb	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	490e      	ldr	r1, [pc, #56]	@ (80020cc <I2C_MasterRequestWrite+0xfc>)
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 f898 	bl	80021c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e010      	b.n	80020c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020a2:	897b      	ldrh	r3, [r7, #10]
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	4907      	ldr	r1, [pc, #28]	@ (80020d0 <I2C_MasterRequestWrite+0x100>)
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 f888 	bl	80021c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	00010008 	.word	0x00010008
 80020d0:	00010002 	.word	0x00010002

080020d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	4613      	mov	r3, r2
 80020e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020e4:	e048      	b.n	8002178 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ec:	d044      	beq.n	8002178 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ee:	f7ff fa47 	bl	8001580 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d302      	bcc.n	8002104 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d139      	bne.n	8002178 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	0c1b      	lsrs	r3, r3, #16
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b01      	cmp	r3, #1
 800210c:	d10d      	bne.n	800212a <I2C_WaitOnFlagUntilTimeout+0x56>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	43da      	mvns	r2, r3
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	4013      	ands	r3, r2
 800211a:	b29b      	uxth	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	bf0c      	ite	eq
 8002120:	2301      	moveq	r3, #1
 8002122:	2300      	movne	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	461a      	mov	r2, r3
 8002128:	e00c      	b.n	8002144 <I2C_WaitOnFlagUntilTimeout+0x70>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	43da      	mvns	r2, r3
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	4013      	ands	r3, r2
 8002136:	b29b      	uxth	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	bf0c      	ite	eq
 800213c:	2301      	moveq	r3, #1
 800213e:	2300      	movne	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	461a      	mov	r2, r3
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	429a      	cmp	r2, r3
 8002148:	d116      	bne.n	8002178 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2220      	movs	r2, #32
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002164:	f043 0220 	orr.w	r2, r3, #32
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e023      	b.n	80021c0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	0c1b      	lsrs	r3, r3, #16
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b01      	cmp	r3, #1
 8002180:	d10d      	bne.n	800219e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	43da      	mvns	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	4013      	ands	r3, r2
 800218e:	b29b      	uxth	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	bf0c      	ite	eq
 8002194:	2301      	moveq	r3, #1
 8002196:	2300      	movne	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	461a      	mov	r2, r3
 800219c:	e00c      	b.n	80021b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	43da      	mvns	r2, r3
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	4013      	ands	r3, r2
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf0c      	ite	eq
 80021b0:	2301      	moveq	r3, #1
 80021b2:	2300      	movne	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	461a      	mov	r2, r3
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d093      	beq.n	80020e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
 80021d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021d6:	e071      	b.n	80022bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021e6:	d123      	bne.n	8002230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002200:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2220      	movs	r2, #32
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221c:	f043 0204 	orr.w	r2, r3, #4
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e067      	b.n	8002300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002236:	d041      	beq.n	80022bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002238:	f7ff f9a2 	bl	8001580 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	429a      	cmp	r2, r3
 8002246:	d302      	bcc.n	800224e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d136      	bne.n	80022bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	0c1b      	lsrs	r3, r3, #16
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b01      	cmp	r3, #1
 8002256:	d10c      	bne.n	8002272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	43da      	mvns	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	4013      	ands	r3, r2
 8002264:	b29b      	uxth	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	bf14      	ite	ne
 800226a:	2301      	movne	r3, #1
 800226c:	2300      	moveq	r3, #0
 800226e:	b2db      	uxtb	r3, r3
 8002270:	e00b      	b.n	800228a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	43da      	mvns	r2, r3
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	4013      	ands	r3, r2
 800227e:	b29b      	uxth	r3, r3
 8002280:	2b00      	cmp	r3, #0
 8002282:	bf14      	ite	ne
 8002284:	2301      	movne	r3, #1
 8002286:	2300      	moveq	r3, #0
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d016      	beq.n	80022bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2220      	movs	r2, #32
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a8:	f043 0220 	orr.w	r2, r3, #32
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e021      	b.n	8002300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	0c1b      	lsrs	r3, r3, #16
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d10c      	bne.n	80022e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	43da      	mvns	r2, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	4013      	ands	r3, r2
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	bf14      	ite	ne
 80022d8:	2301      	movne	r3, #1
 80022da:	2300      	moveq	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	e00b      	b.n	80022f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	43da      	mvns	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	4013      	ands	r3, r2
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	bf14      	ite	ne
 80022f2:	2301      	movne	r3, #1
 80022f4:	2300      	moveq	r3, #0
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f47f af6d 	bne.w	80021d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002314:	e034      	b.n	8002380 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 f886 	bl	8002428 <I2C_IsAcknowledgeFailed>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e034      	b.n	8002390 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232c:	d028      	beq.n	8002380 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800232e:	f7ff f927 	bl	8001580 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	429a      	cmp	r2, r3
 800233c:	d302      	bcc.n	8002344 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d11d      	bne.n	8002380 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800234e:	2b80      	cmp	r3, #128	@ 0x80
 8002350:	d016      	beq.n	8002380 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236c:	f043 0220 	orr.w	r2, r3, #32
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e007      	b.n	8002390 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800238a:	2b80      	cmp	r3, #128	@ 0x80
 800238c:	d1c3      	bne.n	8002316 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023a4:	e034      	b.n	8002410 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 f83e 	bl	8002428 <I2C_IsAcknowledgeFailed>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e034      	b.n	8002420 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023bc:	d028      	beq.n	8002410 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023be:	f7ff f8df 	bl	8001580 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d302      	bcc.n	80023d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d11d      	bne.n	8002410 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	f003 0304 	and.w	r3, r3, #4
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d016      	beq.n	8002410 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fc:	f043 0220 	orr.w	r2, r3, #32
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e007      	b.n	8002420 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	2b04      	cmp	r3, #4
 800241c:	d1c3      	bne.n	80023a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800243a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800243e:	d11b      	bne.n	8002478 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002448:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2220      	movs	r2, #32
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002464:	f043 0204 	orr.w	r2, r3, #4
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e000      	b.n	800247a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e267      	b.n	800296a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d075      	beq.n	8002592 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024a6:	4b88      	ldr	r3, [pc, #544]	@ (80026c8 <HAL_RCC_OscConfig+0x240>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 030c 	and.w	r3, r3, #12
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d00c      	beq.n	80024cc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024b2:	4b85      	ldr	r3, [pc, #532]	@ (80026c8 <HAL_RCC_OscConfig+0x240>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	d112      	bne.n	80024e4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024be:	4b82      	ldr	r3, [pc, #520]	@ (80026c8 <HAL_RCC_OscConfig+0x240>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024ca:	d10b      	bne.n	80024e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024cc:	4b7e      	ldr	r3, [pc, #504]	@ (80026c8 <HAL_RCC_OscConfig+0x240>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d05b      	beq.n	8002590 <HAL_RCC_OscConfig+0x108>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d157      	bne.n	8002590 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e242      	b.n	800296a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024ec:	d106      	bne.n	80024fc <HAL_RCC_OscConfig+0x74>
 80024ee:	4b76      	ldr	r3, [pc, #472]	@ (80026c8 <HAL_RCC_OscConfig+0x240>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a75      	ldr	r2, [pc, #468]	@ (80026c8 <HAL_RCC_OscConfig+0x240>)
 80024f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	e01d      	b.n	8002538 <HAL_RCC_OscConfig+0xb0>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002504:	d10c      	bne.n	8002520 <HAL_RCC_OscConfig+0x98>
 8002506:	4b70      	ldr	r3, [pc, #448]	@ (80026c8 <HAL_RCC_OscConfig+0x240>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a6f      	ldr	r2, [pc, #444]	@ (80026c8 <HAL_RCC_OscConfig+0x240>)
 800250c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	4b6d      	ldr	r3, [pc, #436]	@ (80026c8 <HAL_RCC_OscConfig+0x240>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a6c      	ldr	r2, [pc, #432]	@ (80026c8 <HAL_RCC_OscConfig+0x240>)
 8002518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	e00b      	b.n	8002538 <HAL_RCC_OscConfig+0xb0>
 8002520:	4b69      	ldr	r3, [pc, #420]	@ (80026c8 <HAL_RCC_OscConfig+0x240>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a68      	ldr	r2, [pc, #416]	@ (80026c8 <HAL_RCC_OscConfig+0x240>)
 8002526:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800252a:	6013      	str	r3, [r2, #0]
 800252c:	4b66      	ldr	r3, [pc, #408]	@ (80026c8 <HAL_RCC_OscConfig+0x240>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a65      	ldr	r2, [pc, #404]	@ (80026c8 <HAL_RCC_OscConfig+0x240>)
 8002532:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002536:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d013      	beq.n	8002568 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002540:	f7ff f81e 	bl	8001580 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002548:	f7ff f81a 	bl	8001580 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b64      	cmp	r3, #100	@ 0x64
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e207      	b.n	800296a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255a:	4b5b      	ldr	r3, [pc, #364]	@ (80026c8 <HAL_RCC_OscConfig+0x240>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCC_OscConfig+0xc0>
 8002566:	e014      	b.n	8002592 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002568:	f7ff f80a 	bl	8001580 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002570:	f7ff f806 	bl	8001580 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b64      	cmp	r3, #100	@ 0x64
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e1f3      	b.n	800296a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002582:	4b51      	ldr	r3, [pc, #324]	@ (80026c8 <HAL_RCC_OscConfig+0x240>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f0      	bne.n	8002570 <HAL_RCC_OscConfig+0xe8>
 800258e:	e000      	b.n	8002592 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d063      	beq.n	8002666 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800259e:	4b4a      	ldr	r3, [pc, #296]	@ (80026c8 <HAL_RCC_OscConfig+0x240>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 030c 	and.w	r3, r3, #12
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00b      	beq.n	80025c2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025aa:	4b47      	ldr	r3, [pc, #284]	@ (80026c8 <HAL_RCC_OscConfig+0x240>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d11c      	bne.n	80025f0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025b6:	4b44      	ldr	r3, [pc, #272]	@ (80026c8 <HAL_RCC_OscConfig+0x240>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d116      	bne.n	80025f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c2:	4b41      	ldr	r3, [pc, #260]	@ (80026c8 <HAL_RCC_OscConfig+0x240>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d005      	beq.n	80025da <HAL_RCC_OscConfig+0x152>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d001      	beq.n	80025da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e1c7      	b.n	800296a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025da:	4b3b      	ldr	r3, [pc, #236]	@ (80026c8 <HAL_RCC_OscConfig+0x240>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	4937      	ldr	r1, [pc, #220]	@ (80026c8 <HAL_RCC_OscConfig+0x240>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ee:	e03a      	b.n	8002666 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d020      	beq.n	800263a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025f8:	4b34      	ldr	r3, [pc, #208]	@ (80026cc <HAL_RCC_OscConfig+0x244>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fe:	f7fe ffbf 	bl	8001580 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002606:	f7fe ffbb 	bl	8001580 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e1a8      	b.n	800296a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002618:	4b2b      	ldr	r3, [pc, #172]	@ (80026c8 <HAL_RCC_OscConfig+0x240>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0f0      	beq.n	8002606 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002624:	4b28      	ldr	r3, [pc, #160]	@ (80026c8 <HAL_RCC_OscConfig+0x240>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4925      	ldr	r1, [pc, #148]	@ (80026c8 <HAL_RCC_OscConfig+0x240>)
 8002634:	4313      	orrs	r3, r2
 8002636:	600b      	str	r3, [r1, #0]
 8002638:	e015      	b.n	8002666 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800263a:	4b24      	ldr	r3, [pc, #144]	@ (80026cc <HAL_RCC_OscConfig+0x244>)
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002640:	f7fe ff9e 	bl	8001580 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002648:	f7fe ff9a 	bl	8001580 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e187      	b.n	800296a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265a:	4b1b      	ldr	r3, [pc, #108]	@ (80026c8 <HAL_RCC_OscConfig+0x240>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1f0      	bne.n	8002648 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d036      	beq.n	80026e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d016      	beq.n	80026a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800267a:	4b15      	ldr	r3, [pc, #84]	@ (80026d0 <HAL_RCC_OscConfig+0x248>)
 800267c:	2201      	movs	r2, #1
 800267e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002680:	f7fe ff7e 	bl	8001580 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002688:	f7fe ff7a 	bl	8001580 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e167      	b.n	800296a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269a:	4b0b      	ldr	r3, [pc, #44]	@ (80026c8 <HAL_RCC_OscConfig+0x240>)
 800269c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f0      	beq.n	8002688 <HAL_RCC_OscConfig+0x200>
 80026a6:	e01b      	b.n	80026e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a8:	4b09      	ldr	r3, [pc, #36]	@ (80026d0 <HAL_RCC_OscConfig+0x248>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ae:	f7fe ff67 	bl	8001580 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b4:	e00e      	b.n	80026d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b6:	f7fe ff63 	bl	8001580 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d907      	bls.n	80026d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e150      	b.n	800296a <HAL_RCC_OscConfig+0x4e2>
 80026c8:	40023800 	.word	0x40023800
 80026cc:	42470000 	.word	0x42470000
 80026d0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d4:	4b88      	ldr	r3, [pc, #544]	@ (80028f8 <HAL_RCC_OscConfig+0x470>)
 80026d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1ea      	bne.n	80026b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 8097 	beq.w	800281c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ee:	2300      	movs	r3, #0
 80026f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026f2:	4b81      	ldr	r3, [pc, #516]	@ (80028f8 <HAL_RCC_OscConfig+0x470>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10f      	bne.n	800271e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	4b7d      	ldr	r3, [pc, #500]	@ (80028f8 <HAL_RCC_OscConfig+0x470>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002706:	4a7c      	ldr	r2, [pc, #496]	@ (80028f8 <HAL_RCC_OscConfig+0x470>)
 8002708:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800270c:	6413      	str	r3, [r2, #64]	@ 0x40
 800270e:	4b7a      	ldr	r3, [pc, #488]	@ (80028f8 <HAL_RCC_OscConfig+0x470>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002712:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002716:	60bb      	str	r3, [r7, #8]
 8002718:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800271a:	2301      	movs	r3, #1
 800271c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271e:	4b77      	ldr	r3, [pc, #476]	@ (80028fc <HAL_RCC_OscConfig+0x474>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002726:	2b00      	cmp	r3, #0
 8002728:	d118      	bne.n	800275c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800272a:	4b74      	ldr	r3, [pc, #464]	@ (80028fc <HAL_RCC_OscConfig+0x474>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a73      	ldr	r2, [pc, #460]	@ (80028fc <HAL_RCC_OscConfig+0x474>)
 8002730:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002734:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002736:	f7fe ff23 	bl	8001580 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800273e:	f7fe ff1f 	bl	8001580 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e10c      	b.n	800296a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002750:	4b6a      	ldr	r3, [pc, #424]	@ (80028fc <HAL_RCC_OscConfig+0x474>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0f0      	beq.n	800273e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d106      	bne.n	8002772 <HAL_RCC_OscConfig+0x2ea>
 8002764:	4b64      	ldr	r3, [pc, #400]	@ (80028f8 <HAL_RCC_OscConfig+0x470>)
 8002766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002768:	4a63      	ldr	r2, [pc, #396]	@ (80028f8 <HAL_RCC_OscConfig+0x470>)
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002770:	e01c      	b.n	80027ac <HAL_RCC_OscConfig+0x324>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	2b05      	cmp	r3, #5
 8002778:	d10c      	bne.n	8002794 <HAL_RCC_OscConfig+0x30c>
 800277a:	4b5f      	ldr	r3, [pc, #380]	@ (80028f8 <HAL_RCC_OscConfig+0x470>)
 800277c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800277e:	4a5e      	ldr	r2, [pc, #376]	@ (80028f8 <HAL_RCC_OscConfig+0x470>)
 8002780:	f043 0304 	orr.w	r3, r3, #4
 8002784:	6713      	str	r3, [r2, #112]	@ 0x70
 8002786:	4b5c      	ldr	r3, [pc, #368]	@ (80028f8 <HAL_RCC_OscConfig+0x470>)
 8002788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800278a:	4a5b      	ldr	r2, [pc, #364]	@ (80028f8 <HAL_RCC_OscConfig+0x470>)
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	6713      	str	r3, [r2, #112]	@ 0x70
 8002792:	e00b      	b.n	80027ac <HAL_RCC_OscConfig+0x324>
 8002794:	4b58      	ldr	r3, [pc, #352]	@ (80028f8 <HAL_RCC_OscConfig+0x470>)
 8002796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002798:	4a57      	ldr	r2, [pc, #348]	@ (80028f8 <HAL_RCC_OscConfig+0x470>)
 800279a:	f023 0301 	bic.w	r3, r3, #1
 800279e:	6713      	str	r3, [r2, #112]	@ 0x70
 80027a0:	4b55      	ldr	r3, [pc, #340]	@ (80028f8 <HAL_RCC_OscConfig+0x470>)
 80027a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a4:	4a54      	ldr	r2, [pc, #336]	@ (80028f8 <HAL_RCC_OscConfig+0x470>)
 80027a6:	f023 0304 	bic.w	r3, r3, #4
 80027aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d015      	beq.n	80027e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b4:	f7fe fee4 	bl	8001580 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ba:	e00a      	b.n	80027d2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027bc:	f7fe fee0 	bl	8001580 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e0cb      	b.n	800296a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d2:	4b49      	ldr	r3, [pc, #292]	@ (80028f8 <HAL_RCC_OscConfig+0x470>)
 80027d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0ee      	beq.n	80027bc <HAL_RCC_OscConfig+0x334>
 80027de:	e014      	b.n	800280a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e0:	f7fe fece 	bl	8001580 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e6:	e00a      	b.n	80027fe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e8:	f7fe feca 	bl	8001580 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e0b5      	b.n	800296a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027fe:	4b3e      	ldr	r3, [pc, #248]	@ (80028f8 <HAL_RCC_OscConfig+0x470>)
 8002800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1ee      	bne.n	80027e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800280a:	7dfb      	ldrb	r3, [r7, #23]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d105      	bne.n	800281c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002810:	4b39      	ldr	r3, [pc, #228]	@ (80028f8 <HAL_RCC_OscConfig+0x470>)
 8002812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002814:	4a38      	ldr	r2, [pc, #224]	@ (80028f8 <HAL_RCC_OscConfig+0x470>)
 8002816:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800281a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 80a1 	beq.w	8002968 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002826:	4b34      	ldr	r3, [pc, #208]	@ (80028f8 <HAL_RCC_OscConfig+0x470>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	2b08      	cmp	r3, #8
 8002830:	d05c      	beq.n	80028ec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	2b02      	cmp	r3, #2
 8002838:	d141      	bne.n	80028be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283a:	4b31      	ldr	r3, [pc, #196]	@ (8002900 <HAL_RCC_OscConfig+0x478>)
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002840:	f7fe fe9e 	bl	8001580 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002848:	f7fe fe9a 	bl	8001580 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e087      	b.n	800296a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285a:	4b27      	ldr	r3, [pc, #156]	@ (80028f8 <HAL_RCC_OscConfig+0x470>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f0      	bne.n	8002848 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69da      	ldr	r2, [r3, #28]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002874:	019b      	lsls	r3, r3, #6
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287c:	085b      	lsrs	r3, r3, #1
 800287e:	3b01      	subs	r3, #1
 8002880:	041b      	lsls	r3, r3, #16
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002888:	061b      	lsls	r3, r3, #24
 800288a:	491b      	ldr	r1, [pc, #108]	@ (80028f8 <HAL_RCC_OscConfig+0x470>)
 800288c:	4313      	orrs	r3, r2
 800288e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002890:	4b1b      	ldr	r3, [pc, #108]	@ (8002900 <HAL_RCC_OscConfig+0x478>)
 8002892:	2201      	movs	r2, #1
 8002894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002896:	f7fe fe73 	bl	8001580 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289e:	f7fe fe6f 	bl	8001580 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e05c      	b.n	800296a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b0:	4b11      	ldr	r3, [pc, #68]	@ (80028f8 <HAL_RCC_OscConfig+0x470>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f0      	beq.n	800289e <HAL_RCC_OscConfig+0x416>
 80028bc:	e054      	b.n	8002968 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028be:	4b10      	ldr	r3, [pc, #64]	@ (8002900 <HAL_RCC_OscConfig+0x478>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c4:	f7fe fe5c 	bl	8001580 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028cc:	f7fe fe58 	bl	8001580 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e045      	b.n	800296a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028de:	4b06      	ldr	r3, [pc, #24]	@ (80028f8 <HAL_RCC_OscConfig+0x470>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x444>
 80028ea:	e03d      	b.n	8002968 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d107      	bne.n	8002904 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e038      	b.n	800296a <HAL_RCC_OscConfig+0x4e2>
 80028f8:	40023800 	.word	0x40023800
 80028fc:	40007000 	.word	0x40007000
 8002900:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002904:	4b1b      	ldr	r3, [pc, #108]	@ (8002974 <HAL_RCC_OscConfig+0x4ec>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d028      	beq.n	8002964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800291c:	429a      	cmp	r2, r3
 800291e:	d121      	bne.n	8002964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292a:	429a      	cmp	r2, r3
 800292c:	d11a      	bne.n	8002964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002934:	4013      	ands	r3, r2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800293a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800293c:	4293      	cmp	r3, r2
 800293e:	d111      	bne.n	8002964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294a:	085b      	lsrs	r3, r3, #1
 800294c:	3b01      	subs	r3, #1
 800294e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002950:	429a      	cmp	r2, r3
 8002952:	d107      	bne.n	8002964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002960:	429a      	cmp	r2, r3
 8002962:	d001      	beq.n	8002968 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40023800 	.word	0x40023800

08002978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e0cc      	b.n	8002b26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800298c:	4b68      	ldr	r3, [pc, #416]	@ (8002b30 <HAL_RCC_ClockConfig+0x1b8>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d90c      	bls.n	80029b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299a:	4b65      	ldr	r3, [pc, #404]	@ (8002b30 <HAL_RCC_ClockConfig+0x1b8>)
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a2:	4b63      	ldr	r3, [pc, #396]	@ (8002b30 <HAL_RCC_ClockConfig+0x1b8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d001      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e0b8      	b.n	8002b26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d020      	beq.n	8002a02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d005      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029cc:	4b59      	ldr	r3, [pc, #356]	@ (8002b34 <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	4a58      	ldr	r2, [pc, #352]	@ (8002b34 <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0308 	and.w	r3, r3, #8
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029e4:	4b53      	ldr	r3, [pc, #332]	@ (8002b34 <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	4a52      	ldr	r2, [pc, #328]	@ (8002b34 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f0:	4b50      	ldr	r3, [pc, #320]	@ (8002b34 <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	494d      	ldr	r1, [pc, #308]	@ (8002b34 <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d044      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d107      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a16:	4b47      	ldr	r3, [pc, #284]	@ (8002b34 <HAL_RCC_ClockConfig+0x1bc>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d119      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e07f      	b.n	8002b26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d003      	beq.n	8002a36 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a32:	2b03      	cmp	r3, #3
 8002a34:	d107      	bne.n	8002a46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a36:	4b3f      	ldr	r3, [pc, #252]	@ (8002b34 <HAL_RCC_ClockConfig+0x1bc>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d109      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e06f      	b.n	8002b26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a46:	4b3b      	ldr	r3, [pc, #236]	@ (8002b34 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e067      	b.n	8002b26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a56:	4b37      	ldr	r3, [pc, #220]	@ (8002b34 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f023 0203 	bic.w	r2, r3, #3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	4934      	ldr	r1, [pc, #208]	@ (8002b34 <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a68:	f7fe fd8a 	bl	8001580 <HAL_GetTick>
 8002a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6e:	e00a      	b.n	8002a86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a70:	f7fe fd86 	bl	8001580 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e04f      	b.n	8002b26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a86:	4b2b      	ldr	r3, [pc, #172]	@ (8002b34 <HAL_RCC_ClockConfig+0x1bc>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 020c 	and.w	r2, r3, #12
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d1eb      	bne.n	8002a70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a98:	4b25      	ldr	r3, [pc, #148]	@ (8002b30 <HAL_RCC_ClockConfig+0x1b8>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d20c      	bcs.n	8002ac0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa6:	4b22      	ldr	r3, [pc, #136]	@ (8002b30 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aae:	4b20      	ldr	r3, [pc, #128]	@ (8002b30 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d001      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e032      	b.n	8002b26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d008      	beq.n	8002ade <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002acc:	4b19      	ldr	r3, [pc, #100]	@ (8002b34 <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	4916      	ldr	r1, [pc, #88]	@ (8002b34 <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0308 	and.w	r3, r3, #8
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d009      	beq.n	8002afe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aea:	4b12      	ldr	r3, [pc, #72]	@ (8002b34 <HAL_RCC_ClockConfig+0x1bc>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	490e      	ldr	r1, [pc, #56]	@ (8002b34 <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002afe:	f000 f821 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 8002b02:	4602      	mov	r2, r0
 8002b04:	4b0b      	ldr	r3, [pc, #44]	@ (8002b34 <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	091b      	lsrs	r3, r3, #4
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	490a      	ldr	r1, [pc, #40]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c0>)
 8002b10:	5ccb      	ldrb	r3, [r1, r3]
 8002b12:	fa22 f303 	lsr.w	r3, r2, r3
 8002b16:	4a09      	ldr	r2, [pc, #36]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b1a:	4b09      	ldr	r3, [pc, #36]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fe fcea 	bl	80014f8 <HAL_InitTick>

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40023c00 	.word	0x40023c00
 8002b34:	40023800 	.word	0x40023800
 8002b38:	080041b0 	.word	0x080041b0
 8002b3c:	2000000c 	.word	0x2000000c
 8002b40:	20000010 	.word	0x20000010

08002b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b48:	b094      	sub	sp, #80	@ 0x50
 8002b4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b5c:	4b79      	ldr	r3, [pc, #484]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 030c 	and.w	r3, r3, #12
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d00d      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0x40>
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	f200 80e1 	bhi.w	8002d30 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d002      	beq.n	8002b78 <HAL_RCC_GetSysClockFreq+0x34>
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d003      	beq.n	8002b7e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b76:	e0db      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b78:	4b73      	ldr	r3, [pc, #460]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b7c:	e0db      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b7e:	4b73      	ldr	r3, [pc, #460]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x208>)
 8002b80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b82:	e0d8      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b84:	4b6f      	ldr	r3, [pc, #444]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b8c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b8e:	4b6d      	ldr	r3, [pc, #436]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d063      	beq.n	8002c62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b9a:	4b6a      	ldr	r3, [pc, #424]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	099b      	lsrs	r3, r3, #6
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ba4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bac:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bae:	2300      	movs	r3, #0
 8002bb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bb2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002bb6:	4622      	mov	r2, r4
 8002bb8:	462b      	mov	r3, r5
 8002bba:	f04f 0000 	mov.w	r0, #0
 8002bbe:	f04f 0100 	mov.w	r1, #0
 8002bc2:	0159      	lsls	r1, r3, #5
 8002bc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bc8:	0150      	lsls	r0, r2, #5
 8002bca:	4602      	mov	r2, r0
 8002bcc:	460b      	mov	r3, r1
 8002bce:	4621      	mov	r1, r4
 8002bd0:	1a51      	subs	r1, r2, r1
 8002bd2:	6139      	str	r1, [r7, #16]
 8002bd4:	4629      	mov	r1, r5
 8002bd6:	eb63 0301 	sbc.w	r3, r3, r1
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002be8:	4659      	mov	r1, fp
 8002bea:	018b      	lsls	r3, r1, #6
 8002bec:	4651      	mov	r1, sl
 8002bee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bf2:	4651      	mov	r1, sl
 8002bf4:	018a      	lsls	r2, r1, #6
 8002bf6:	4651      	mov	r1, sl
 8002bf8:	ebb2 0801 	subs.w	r8, r2, r1
 8002bfc:	4659      	mov	r1, fp
 8002bfe:	eb63 0901 	sbc.w	r9, r3, r1
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	f04f 0300 	mov.w	r3, #0
 8002c0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c16:	4690      	mov	r8, r2
 8002c18:	4699      	mov	r9, r3
 8002c1a:	4623      	mov	r3, r4
 8002c1c:	eb18 0303 	adds.w	r3, r8, r3
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	462b      	mov	r3, r5
 8002c24:	eb49 0303 	adc.w	r3, r9, r3
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	f04f 0300 	mov.w	r3, #0
 8002c32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c36:	4629      	mov	r1, r5
 8002c38:	024b      	lsls	r3, r1, #9
 8002c3a:	4621      	mov	r1, r4
 8002c3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c40:	4621      	mov	r1, r4
 8002c42:	024a      	lsls	r2, r1, #9
 8002c44:	4610      	mov	r0, r2
 8002c46:	4619      	mov	r1, r3
 8002c48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c54:	f7fd fad0 	bl	80001f8 <__aeabi_uldivmod>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c60:	e058      	b.n	8002d14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c62:	4b38      	ldr	r3, [pc, #224]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	099b      	lsrs	r3, r3, #6
 8002c68:	2200      	movs	r2, #0
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	4611      	mov	r1, r2
 8002c6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c72:	623b      	str	r3, [r7, #32]
 8002c74:	2300      	movs	r3, #0
 8002c76:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c7c:	4642      	mov	r2, r8
 8002c7e:	464b      	mov	r3, r9
 8002c80:	f04f 0000 	mov.w	r0, #0
 8002c84:	f04f 0100 	mov.w	r1, #0
 8002c88:	0159      	lsls	r1, r3, #5
 8002c8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c8e:	0150      	lsls	r0, r2, #5
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4641      	mov	r1, r8
 8002c96:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c9a:	4649      	mov	r1, r9
 8002c9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	f04f 0300 	mov.w	r3, #0
 8002ca8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cb4:	ebb2 040a 	subs.w	r4, r2, sl
 8002cb8:	eb63 050b 	sbc.w	r5, r3, fp
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	f04f 0300 	mov.w	r3, #0
 8002cc4:	00eb      	lsls	r3, r5, #3
 8002cc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cca:	00e2      	lsls	r2, r4, #3
 8002ccc:	4614      	mov	r4, r2
 8002cce:	461d      	mov	r5, r3
 8002cd0:	4643      	mov	r3, r8
 8002cd2:	18e3      	adds	r3, r4, r3
 8002cd4:	603b      	str	r3, [r7, #0]
 8002cd6:	464b      	mov	r3, r9
 8002cd8:	eb45 0303 	adc.w	r3, r5, r3
 8002cdc:	607b      	str	r3, [r7, #4]
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cea:	4629      	mov	r1, r5
 8002cec:	028b      	lsls	r3, r1, #10
 8002cee:	4621      	mov	r1, r4
 8002cf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cf4:	4621      	mov	r1, r4
 8002cf6:	028a      	lsls	r2, r1, #10
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cfe:	2200      	movs	r2, #0
 8002d00:	61bb      	str	r3, [r7, #24]
 8002d02:	61fa      	str	r2, [r7, #28]
 8002d04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d08:	f7fd fa76 	bl	80001f8 <__aeabi_uldivmod>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4613      	mov	r3, r2
 8002d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d14:	4b0b      	ldr	r3, [pc, #44]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	0c1b      	lsrs	r3, r3, #16
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	3301      	adds	r3, #1
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002d24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d2e:	e002      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d30:	4b05      	ldr	r3, [pc, #20]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3750      	adds	r7, #80	@ 0x50
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d42:	bf00      	nop
 8002d44:	40023800 	.word	0x40023800
 8002d48:	00f42400 	.word	0x00f42400
 8002d4c:	007a1200 	.word	0x007a1200

08002d50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d54:	4b03      	ldr	r3, [pc, #12]	@ (8002d64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d56:	681b      	ldr	r3, [r3, #0]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	2000000c 	.word	0x2000000c

08002d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d6c:	f7ff fff0 	bl	8002d50 <HAL_RCC_GetHCLKFreq>
 8002d70:	4602      	mov	r2, r0
 8002d72:	4b05      	ldr	r3, [pc, #20]	@ (8002d88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	0a9b      	lsrs	r3, r3, #10
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	4903      	ldr	r1, [pc, #12]	@ (8002d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d7e:	5ccb      	ldrb	r3, [r1, r3]
 8002d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	080041c0 	.word	0x080041c0

08002d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d94:	f7ff ffdc 	bl	8002d50 <HAL_RCC_GetHCLKFreq>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	4b05      	ldr	r3, [pc, #20]	@ (8002db0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	0b5b      	lsrs	r3, r3, #13
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	4903      	ldr	r1, [pc, #12]	@ (8002db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002da6:	5ccb      	ldrb	r3, [r1, r3]
 8002da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40023800 	.word	0x40023800
 8002db4:	080041c0 	.word	0x080041c0

08002db8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e041      	b.n	8002e4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d106      	bne.n	8002de4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7fe fa1c 	bl	800121c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2202      	movs	r2, #2
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3304      	adds	r3, #4
 8002df4:	4619      	mov	r1, r3
 8002df6:	4610      	mov	r0, r2
 8002df8:	f000 f9a0 	bl	800313c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
	...

08002e58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d109      	bne.n	8002e7c <HAL_TIM_PWM_Start+0x24>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	bf14      	ite	ne
 8002e74:	2301      	movne	r3, #1
 8002e76:	2300      	moveq	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	e022      	b.n	8002ec2 <HAL_TIM_PWM_Start+0x6a>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d109      	bne.n	8002e96 <HAL_TIM_PWM_Start+0x3e>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	bf14      	ite	ne
 8002e8e:	2301      	movne	r3, #1
 8002e90:	2300      	moveq	r3, #0
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	e015      	b.n	8002ec2 <HAL_TIM_PWM_Start+0x6a>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d109      	bne.n	8002eb0 <HAL_TIM_PWM_Start+0x58>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	bf14      	ite	ne
 8002ea8:	2301      	movne	r3, #1
 8002eaa:	2300      	moveq	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	e008      	b.n	8002ec2 <HAL_TIM_PWM_Start+0x6a>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	bf14      	ite	ne
 8002ebc:	2301      	movne	r3, #1
 8002ebe:	2300      	moveq	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e068      	b.n	8002f9c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d104      	bne.n	8002eda <HAL_TIM_PWM_Start+0x82>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ed8:	e013      	b.n	8002f02 <HAL_TIM_PWM_Start+0xaa>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d104      	bne.n	8002eea <HAL_TIM_PWM_Start+0x92>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ee8:	e00b      	b.n	8002f02 <HAL_TIM_PWM_Start+0xaa>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d104      	bne.n	8002efa <HAL_TIM_PWM_Start+0xa2>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ef8:	e003      	b.n	8002f02 <HAL_TIM_PWM_Start+0xaa>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2202      	movs	r2, #2
 8002efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2201      	movs	r2, #1
 8002f08:	6839      	ldr	r1, [r7, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 fb28 	bl	8003560 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a23      	ldr	r2, [pc, #140]	@ (8002fa4 <HAL_TIM_PWM_Start+0x14c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d107      	bne.n	8002f2a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f28:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a1d      	ldr	r2, [pc, #116]	@ (8002fa4 <HAL_TIM_PWM_Start+0x14c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d018      	beq.n	8002f66 <HAL_TIM_PWM_Start+0x10e>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f3c:	d013      	beq.n	8002f66 <HAL_TIM_PWM_Start+0x10e>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a19      	ldr	r2, [pc, #100]	@ (8002fa8 <HAL_TIM_PWM_Start+0x150>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d00e      	beq.n	8002f66 <HAL_TIM_PWM_Start+0x10e>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a17      	ldr	r2, [pc, #92]	@ (8002fac <HAL_TIM_PWM_Start+0x154>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d009      	beq.n	8002f66 <HAL_TIM_PWM_Start+0x10e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a16      	ldr	r2, [pc, #88]	@ (8002fb0 <HAL_TIM_PWM_Start+0x158>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d004      	beq.n	8002f66 <HAL_TIM_PWM_Start+0x10e>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a14      	ldr	r2, [pc, #80]	@ (8002fb4 <HAL_TIM_PWM_Start+0x15c>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d111      	bne.n	8002f8a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2b06      	cmp	r3, #6
 8002f76:	d010      	beq.n	8002f9a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0201 	orr.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f88:	e007      	b.n	8002f9a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 0201 	orr.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40010000 	.word	0x40010000
 8002fa8:	40000400 	.word	0x40000400
 8002fac:	40000800 	.word	0x40000800
 8002fb0:	40000c00 	.word	0x40000c00
 8002fb4:	40014000 	.word	0x40014000

08002fb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e0ae      	b.n	8003134 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b0c      	cmp	r3, #12
 8002fe2:	f200 809f 	bhi.w	8003124 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8002fec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fec:	08003021 	.word	0x08003021
 8002ff0:	08003125 	.word	0x08003125
 8002ff4:	08003125 	.word	0x08003125
 8002ff8:	08003125 	.word	0x08003125
 8002ffc:	08003061 	.word	0x08003061
 8003000:	08003125 	.word	0x08003125
 8003004:	08003125 	.word	0x08003125
 8003008:	08003125 	.word	0x08003125
 800300c:	080030a3 	.word	0x080030a3
 8003010:	08003125 	.word	0x08003125
 8003014:	08003125 	.word	0x08003125
 8003018:	08003125 	.word	0x08003125
 800301c:	080030e3 	.word	0x080030e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	4618      	mov	r0, r3
 8003028:	f000 f90e 	bl	8003248 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	699a      	ldr	r2, [r3, #24]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0208 	orr.w	r2, r2, #8
 800303a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699a      	ldr	r2, [r3, #24]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0204 	bic.w	r2, r2, #4
 800304a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6999      	ldr	r1, [r3, #24]
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	691a      	ldr	r2, [r3, #16]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	619a      	str	r2, [r3, #24]
      break;
 800305e:	e064      	b.n	800312a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68b9      	ldr	r1, [r7, #8]
 8003066:	4618      	mov	r0, r3
 8003068:	f000 f954 	bl	8003314 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	699a      	ldr	r2, [r3, #24]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800307a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699a      	ldr	r2, [r3, #24]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800308a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6999      	ldr	r1, [r3, #24]
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	021a      	lsls	r2, r3, #8
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	619a      	str	r2, [r3, #24]
      break;
 80030a0:	e043      	b.n	800312a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68b9      	ldr	r1, [r7, #8]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 f99f 	bl	80033ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	69da      	ldr	r2, [r3, #28]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f042 0208 	orr.w	r2, r2, #8
 80030bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	69da      	ldr	r2, [r3, #28]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0204 	bic.w	r2, r2, #4
 80030cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	69d9      	ldr	r1, [r3, #28]
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	61da      	str	r2, [r3, #28]
      break;
 80030e0:	e023      	b.n	800312a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68b9      	ldr	r1, [r7, #8]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 f9e9 	bl	80034c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	69da      	ldr	r2, [r3, #28]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	69da      	ldr	r2, [r3, #28]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800310c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	69d9      	ldr	r1, [r3, #28]
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	021a      	lsls	r2, r3, #8
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	61da      	str	r2, [r3, #28]
      break;
 8003122:	e002      	b.n	800312a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	75fb      	strb	r3, [r7, #23]
      break;
 8003128:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003132:	7dfb      	ldrb	r3, [r7, #23]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a37      	ldr	r2, [pc, #220]	@ (800322c <TIM_Base_SetConfig+0xf0>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d00f      	beq.n	8003174 <TIM_Base_SetConfig+0x38>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800315a:	d00b      	beq.n	8003174 <TIM_Base_SetConfig+0x38>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a34      	ldr	r2, [pc, #208]	@ (8003230 <TIM_Base_SetConfig+0xf4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d007      	beq.n	8003174 <TIM_Base_SetConfig+0x38>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a33      	ldr	r2, [pc, #204]	@ (8003234 <TIM_Base_SetConfig+0xf8>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d003      	beq.n	8003174 <TIM_Base_SetConfig+0x38>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a32      	ldr	r2, [pc, #200]	@ (8003238 <TIM_Base_SetConfig+0xfc>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d108      	bne.n	8003186 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800317a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	4313      	orrs	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a28      	ldr	r2, [pc, #160]	@ (800322c <TIM_Base_SetConfig+0xf0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d01b      	beq.n	80031c6 <TIM_Base_SetConfig+0x8a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003194:	d017      	beq.n	80031c6 <TIM_Base_SetConfig+0x8a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a25      	ldr	r2, [pc, #148]	@ (8003230 <TIM_Base_SetConfig+0xf4>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d013      	beq.n	80031c6 <TIM_Base_SetConfig+0x8a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a24      	ldr	r2, [pc, #144]	@ (8003234 <TIM_Base_SetConfig+0xf8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00f      	beq.n	80031c6 <TIM_Base_SetConfig+0x8a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a23      	ldr	r2, [pc, #140]	@ (8003238 <TIM_Base_SetConfig+0xfc>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d00b      	beq.n	80031c6 <TIM_Base_SetConfig+0x8a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a22      	ldr	r2, [pc, #136]	@ (800323c <TIM_Base_SetConfig+0x100>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d007      	beq.n	80031c6 <TIM_Base_SetConfig+0x8a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a21      	ldr	r2, [pc, #132]	@ (8003240 <TIM_Base_SetConfig+0x104>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d003      	beq.n	80031c6 <TIM_Base_SetConfig+0x8a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a20      	ldr	r2, [pc, #128]	@ (8003244 <TIM_Base_SetConfig+0x108>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d108      	bne.n	80031d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a0c      	ldr	r2, [pc, #48]	@ (800322c <TIM_Base_SetConfig+0xf0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d103      	bne.n	8003206 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	691a      	ldr	r2, [r3, #16]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f043 0204 	orr.w	r2, r3, #4
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	601a      	str	r2, [r3, #0]
}
 800321e:	bf00      	nop
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40010000 	.word	0x40010000
 8003230:	40000400 	.word	0x40000400
 8003234:	40000800 	.word	0x40000800
 8003238:	40000c00 	.word	0x40000c00
 800323c:	40014000 	.word	0x40014000
 8003240:	40014400 	.word	0x40014400
 8003244:	40014800 	.word	0x40014800

08003248 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	f023 0201 	bic.w	r2, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 0303 	bic.w	r3, r3, #3
 800327e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	4313      	orrs	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f023 0302 	bic.w	r3, r3, #2
 8003290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	4313      	orrs	r3, r2
 800329a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a1c      	ldr	r2, [pc, #112]	@ (8003310 <TIM_OC1_SetConfig+0xc8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d10c      	bne.n	80032be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f023 0308 	bic.w	r3, r3, #8
 80032aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f023 0304 	bic.w	r3, r3, #4
 80032bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a13      	ldr	r2, [pc, #76]	@ (8003310 <TIM_OC1_SetConfig+0xc8>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d111      	bne.n	80032ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80032d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	4313      	orrs	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	621a      	str	r2, [r3, #32]
}
 8003304:	bf00      	nop
 8003306:	371c      	adds	r7, #28
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	40010000 	.word	0x40010000

08003314 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003314:	b480      	push	{r7}
 8003316:	b087      	sub	sp, #28
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	f023 0210 	bic.w	r2, r3, #16
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800334a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	021b      	lsls	r3, r3, #8
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4313      	orrs	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f023 0320 	bic.w	r3, r3, #32
 800335e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	4313      	orrs	r3, r2
 800336a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a1e      	ldr	r2, [pc, #120]	@ (80033e8 <TIM_OC2_SetConfig+0xd4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d10d      	bne.n	8003390 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800337a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	4313      	orrs	r3, r2
 8003386:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800338e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a15      	ldr	r2, [pc, #84]	@ (80033e8 <TIM_OC2_SetConfig+0xd4>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d113      	bne.n	80033c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800339e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80033a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4313      	orrs	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	621a      	str	r2, [r3, #32]
}
 80033da:	bf00      	nop
 80033dc:	371c      	adds	r7, #28
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40010000 	.word	0x40010000

080033ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800341a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f023 0303 	bic.w	r3, r3, #3
 8003422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	4313      	orrs	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003434:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	021b      	lsls	r3, r3, #8
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	4313      	orrs	r3, r2
 8003440:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a1d      	ldr	r2, [pc, #116]	@ (80034bc <TIM_OC3_SetConfig+0xd0>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d10d      	bne.n	8003466 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003450:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	021b      	lsls	r3, r3, #8
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	4313      	orrs	r3, r2
 800345c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003464:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a14      	ldr	r2, [pc, #80]	@ (80034bc <TIM_OC3_SetConfig+0xd0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d113      	bne.n	8003496 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800347c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	4313      	orrs	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	4313      	orrs	r3, r2
 8003494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	621a      	str	r2, [r3, #32]
}
 80034b0:	bf00      	nop
 80034b2:	371c      	adds	r7, #28
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	40010000 	.word	0x40010000

080034c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	021b      	lsls	r3, r3, #8
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	4313      	orrs	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800350a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	031b      	lsls	r3, r3, #12
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a10      	ldr	r2, [pc, #64]	@ (800355c <TIM_OC4_SetConfig+0x9c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d109      	bne.n	8003534 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003526:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	019b      	lsls	r3, r3, #6
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	621a      	str	r2, [r3, #32]
}
 800354e:	bf00      	nop
 8003550:	371c      	adds	r7, #28
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40010000 	.word	0x40010000

08003560 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003560:	b480      	push	{r7}
 8003562:	b087      	sub	sp, #28
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	f003 031f 	and.w	r3, r3, #31
 8003572:	2201      	movs	r2, #1
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a1a      	ldr	r2, [r3, #32]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	43db      	mvns	r3, r3
 8003582:	401a      	ands	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a1a      	ldr	r2, [r3, #32]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f003 031f 	and.w	r3, r3, #31
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	fa01 f303 	lsl.w	r3, r1, r3
 8003598:	431a      	orrs	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	621a      	str	r2, [r3, #32]
}
 800359e:	bf00      	nop
 80035a0:	371c      	adds	r7, #28
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
	...

080035ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d101      	bne.n	80035c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035c0:	2302      	movs	r3, #2
 80035c2:	e050      	b.n	8003666 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2202      	movs	r2, #2
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a1c      	ldr	r2, [pc, #112]	@ (8003674 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d018      	beq.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003610:	d013      	beq.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a18      	ldr	r2, [pc, #96]	@ (8003678 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d00e      	beq.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a16      	ldr	r2, [pc, #88]	@ (800367c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d009      	beq.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a15      	ldr	r2, [pc, #84]	@ (8003680 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d004      	beq.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a13      	ldr	r2, [pc, #76]	@ (8003684 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d10c      	bne.n	8003654 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003640:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	4313      	orrs	r3, r2
 800364a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40010000 	.word	0x40010000
 8003678:	40000400 	.word	0x40000400
 800367c:	40000800 	.word	0x40000800
 8003680:	40000c00 	.word	0x40000c00
 8003684:	40014000 	.word	0x40014000

08003688 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e03d      	b.n	8003720 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	4313      	orrs	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e042      	b.n	80037c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7fd fdfa 	bl	800134c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2224      	movs	r2, #36	@ 0x24
 800375c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800376e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f973 	bl	8003a5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	691a      	ldr	r2, [r3, #16]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003784:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	695a      	ldr	r2, [r3, #20]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003794:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08a      	sub	sp, #40	@ 0x28
 80037d0:	af02      	add	r7, sp, #8
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	4613      	mov	r3, r2
 80037da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037dc:	2300      	movs	r3, #0
 80037de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b20      	cmp	r3, #32
 80037ea:	d175      	bne.n	80038d8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <HAL_UART_Transmit+0x2c>
 80037f2:	88fb      	ldrh	r3, [r7, #6]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e06e      	b.n	80038da <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2221      	movs	r2, #33	@ 0x21
 8003806:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800380a:	f7fd feb9 	bl	8001580 <HAL_GetTick>
 800380e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	88fa      	ldrh	r2, [r7, #6]
 8003814:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	88fa      	ldrh	r2, [r7, #6]
 800381a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003824:	d108      	bne.n	8003838 <HAL_UART_Transmit+0x6c>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d104      	bne.n	8003838 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800382e:	2300      	movs	r3, #0
 8003830:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	61bb      	str	r3, [r7, #24]
 8003836:	e003      	b.n	8003840 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800383c:	2300      	movs	r3, #0
 800383e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003840:	e02e      	b.n	80038a0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	2200      	movs	r2, #0
 800384a:	2180      	movs	r1, #128	@ 0x80
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 f848 	bl	80038e2 <UART_WaitOnFlagUntilTimeout>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e03a      	b.n	80038da <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10b      	bne.n	8003882 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	461a      	mov	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003878:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	3302      	adds	r3, #2
 800387e:	61bb      	str	r3, [r7, #24]
 8003880:	e007      	b.n	8003892 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	781a      	ldrb	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	3301      	adds	r3, #1
 8003890:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003896:	b29b      	uxth	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1cb      	bne.n	8003842 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2200      	movs	r2, #0
 80038b2:	2140      	movs	r1, #64	@ 0x40
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 f814 	bl	80038e2 <UART_WaitOnFlagUntilTimeout>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e006      	b.n	80038da <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80038d4:	2300      	movs	r3, #0
 80038d6:	e000      	b.n	80038da <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80038d8:	2302      	movs	r3, #2
  }
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3720      	adds	r7, #32
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b086      	sub	sp, #24
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	60f8      	str	r0, [r7, #12]
 80038ea:	60b9      	str	r1, [r7, #8]
 80038ec:	603b      	str	r3, [r7, #0]
 80038ee:	4613      	mov	r3, r2
 80038f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038f2:	e03b      	b.n	800396c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fa:	d037      	beq.n	800396c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fc:	f7fd fe40 	bl	8001580 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	6a3a      	ldr	r2, [r7, #32]
 8003908:	429a      	cmp	r2, r3
 800390a:	d302      	bcc.n	8003912 <UART_WaitOnFlagUntilTimeout+0x30>
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e03a      	b.n	800398c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b00      	cmp	r3, #0
 8003922:	d023      	beq.n	800396c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2b80      	cmp	r3, #128	@ 0x80
 8003928:	d020      	beq.n	800396c <UART_WaitOnFlagUntilTimeout+0x8a>
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2b40      	cmp	r3, #64	@ 0x40
 800392e:	d01d      	beq.n	800396c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b08      	cmp	r3, #8
 800393c:	d116      	bne.n	800396c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800393e:	2300      	movs	r3, #0
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	617b      	str	r3, [r7, #20]
 8003952:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 f81d 	bl	8003994 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2208      	movs	r2, #8
 800395e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e00f      	b.n	800398c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	4013      	ands	r3, r2
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	429a      	cmp	r2, r3
 800397a:	bf0c      	ite	eq
 800397c:	2301      	moveq	r3, #1
 800397e:	2300      	movne	r3, #0
 8003980:	b2db      	uxtb	r3, r3
 8003982:	461a      	mov	r2, r3
 8003984:	79fb      	ldrb	r3, [r7, #7]
 8003986:	429a      	cmp	r2, r3
 8003988:	d0b4      	beq.n	80038f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003994:	b480      	push	{r7}
 8003996:	b095      	sub	sp, #84	@ 0x54
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	330c      	adds	r3, #12
 80039a2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039a6:	e853 3f00 	ldrex	r3, [r3]
 80039aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80039ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	330c      	adds	r3, #12
 80039ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039bc:	643a      	str	r2, [r7, #64]	@ 0x40
 80039be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039c4:	e841 2300 	strex	r3, r2, [r1]
 80039c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80039ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1e5      	bne.n	800399c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	3314      	adds	r3, #20
 80039d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	e853 3f00 	ldrex	r3, [r3]
 80039de:	61fb      	str	r3, [r7, #28]
   return(result);
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f023 0301 	bic.w	r3, r3, #1
 80039e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3314      	adds	r3, #20
 80039ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039f8:	e841 2300 	strex	r3, r2, [r1]
 80039fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1e5      	bne.n	80039d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d119      	bne.n	8003a40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	330c      	adds	r3, #12
 8003a12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	e853 3f00 	ldrex	r3, [r3]
 8003a1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f023 0310 	bic.w	r3, r3, #16
 8003a22:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	330c      	adds	r3, #12
 8003a2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a2c:	61ba      	str	r2, [r7, #24]
 8003a2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a30:	6979      	ldr	r1, [r7, #20]
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	e841 2300 	strex	r3, r2, [r1]
 8003a38:	613b      	str	r3, [r7, #16]
   return(result);
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1e5      	bne.n	8003a0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003a4e:	bf00      	nop
 8003a50:	3754      	adds	r7, #84	@ 0x54
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
	...

08003a5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a60:	b0c0      	sub	sp, #256	@ 0x100
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a78:	68d9      	ldr	r1, [r3, #12]
 8003a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	ea40 0301 	orr.w	r3, r0, r1
 8003a84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	431a      	orrs	r2, r3
 8003a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003ab4:	f021 010c 	bic.w	r1, r1, #12
 8003ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003ac2:	430b      	orrs	r3, r1
 8003ac4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad6:	6999      	ldr	r1, [r3, #24]
 8003ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	ea40 0301 	orr.w	r3, r0, r1
 8003ae2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	4b8f      	ldr	r3, [pc, #572]	@ (8003d28 <UART_SetConfig+0x2cc>)
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d005      	beq.n	8003afc <UART_SetConfig+0xa0>
 8003af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	4b8d      	ldr	r3, [pc, #564]	@ (8003d2c <UART_SetConfig+0x2d0>)
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d104      	bne.n	8003b06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003afc:	f7ff f948 	bl	8002d90 <HAL_RCC_GetPCLK2Freq>
 8003b00:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003b04:	e003      	b.n	8003b0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b06:	f7ff f92f 	bl	8002d68 <HAL_RCC_GetPCLK1Freq>
 8003b0a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b18:	f040 810c 	bne.w	8003d34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b20:	2200      	movs	r2, #0
 8003b22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b26:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003b2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003b2e:	4622      	mov	r2, r4
 8003b30:	462b      	mov	r3, r5
 8003b32:	1891      	adds	r1, r2, r2
 8003b34:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003b36:	415b      	adcs	r3, r3
 8003b38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b3e:	4621      	mov	r1, r4
 8003b40:	eb12 0801 	adds.w	r8, r2, r1
 8003b44:	4629      	mov	r1, r5
 8003b46:	eb43 0901 	adc.w	r9, r3, r1
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	f04f 0300 	mov.w	r3, #0
 8003b52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b5e:	4690      	mov	r8, r2
 8003b60:	4699      	mov	r9, r3
 8003b62:	4623      	mov	r3, r4
 8003b64:	eb18 0303 	adds.w	r3, r8, r3
 8003b68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b6c:	462b      	mov	r3, r5
 8003b6e:	eb49 0303 	adc.w	r3, r9, r3
 8003b72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b82:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	18db      	adds	r3, r3, r3
 8003b8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b90:	4613      	mov	r3, r2
 8003b92:	eb42 0303 	adc.w	r3, r2, r3
 8003b96:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003b9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ba0:	f7fc fb2a 	bl	80001f8 <__aeabi_uldivmod>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4b61      	ldr	r3, [pc, #388]	@ (8003d30 <UART_SetConfig+0x2d4>)
 8003baa:	fba3 2302 	umull	r2, r3, r3, r2
 8003bae:	095b      	lsrs	r3, r3, #5
 8003bb0:	011c      	lsls	r4, r3, #4
 8003bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003bbc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003bc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003bc4:	4642      	mov	r2, r8
 8003bc6:	464b      	mov	r3, r9
 8003bc8:	1891      	adds	r1, r2, r2
 8003bca:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003bcc:	415b      	adcs	r3, r3
 8003bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003bd4:	4641      	mov	r1, r8
 8003bd6:	eb12 0a01 	adds.w	sl, r2, r1
 8003bda:	4649      	mov	r1, r9
 8003bdc:	eb43 0b01 	adc.w	fp, r3, r1
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bf4:	4692      	mov	sl, r2
 8003bf6:	469b      	mov	fp, r3
 8003bf8:	4643      	mov	r3, r8
 8003bfa:	eb1a 0303 	adds.w	r3, sl, r3
 8003bfe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c02:	464b      	mov	r3, r9
 8003c04:	eb4b 0303 	adc.w	r3, fp, r3
 8003c08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c18:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003c1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c20:	460b      	mov	r3, r1
 8003c22:	18db      	adds	r3, r3, r3
 8003c24:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c26:	4613      	mov	r3, r2
 8003c28:	eb42 0303 	adc.w	r3, r2, r3
 8003c2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003c32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003c36:	f7fc fadf 	bl	80001f8 <__aeabi_uldivmod>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4611      	mov	r1, r2
 8003c40:	4b3b      	ldr	r3, [pc, #236]	@ (8003d30 <UART_SetConfig+0x2d4>)
 8003c42:	fba3 2301 	umull	r2, r3, r3, r1
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	2264      	movs	r2, #100	@ 0x64
 8003c4a:	fb02 f303 	mul.w	r3, r2, r3
 8003c4e:	1acb      	subs	r3, r1, r3
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003c56:	4b36      	ldr	r3, [pc, #216]	@ (8003d30 <UART_SetConfig+0x2d4>)
 8003c58:	fba3 2302 	umull	r2, r3, r3, r2
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c64:	441c      	add	r4, r3
 8003c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c70:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003c74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003c78:	4642      	mov	r2, r8
 8003c7a:	464b      	mov	r3, r9
 8003c7c:	1891      	adds	r1, r2, r2
 8003c7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c80:	415b      	adcs	r3, r3
 8003c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003c88:	4641      	mov	r1, r8
 8003c8a:	1851      	adds	r1, r2, r1
 8003c8c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c8e:	4649      	mov	r1, r9
 8003c90:	414b      	adcs	r3, r1
 8003c92:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c94:	f04f 0200 	mov.w	r2, #0
 8003c98:	f04f 0300 	mov.w	r3, #0
 8003c9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ca0:	4659      	mov	r1, fp
 8003ca2:	00cb      	lsls	r3, r1, #3
 8003ca4:	4651      	mov	r1, sl
 8003ca6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003caa:	4651      	mov	r1, sl
 8003cac:	00ca      	lsls	r2, r1, #3
 8003cae:	4610      	mov	r0, r2
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	4642      	mov	r2, r8
 8003cb6:	189b      	adds	r3, r3, r2
 8003cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003cbc:	464b      	mov	r3, r9
 8003cbe:	460a      	mov	r2, r1
 8003cc0:	eb42 0303 	adc.w	r3, r2, r3
 8003cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003cd4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003cd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003cdc:	460b      	mov	r3, r1
 8003cde:	18db      	adds	r3, r3, r3
 8003ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	eb42 0303 	adc.w	r3, r2, r3
 8003ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003cf2:	f7fc fa81 	bl	80001f8 <__aeabi_uldivmod>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8003d30 <UART_SetConfig+0x2d4>)
 8003cfc:	fba3 1302 	umull	r1, r3, r3, r2
 8003d00:	095b      	lsrs	r3, r3, #5
 8003d02:	2164      	movs	r1, #100	@ 0x64
 8003d04:	fb01 f303 	mul.w	r3, r1, r3
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	3332      	adds	r3, #50	@ 0x32
 8003d0e:	4a08      	ldr	r2, [pc, #32]	@ (8003d30 <UART_SetConfig+0x2d4>)
 8003d10:	fba2 2303 	umull	r2, r3, r2, r3
 8003d14:	095b      	lsrs	r3, r3, #5
 8003d16:	f003 0207 	and.w	r2, r3, #7
 8003d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4422      	add	r2, r4
 8003d22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d24:	e106      	b.n	8003f34 <UART_SetConfig+0x4d8>
 8003d26:	bf00      	nop
 8003d28:	40011000 	.word	0x40011000
 8003d2c:	40011400 	.word	0x40011400
 8003d30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d3e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003d42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003d46:	4642      	mov	r2, r8
 8003d48:	464b      	mov	r3, r9
 8003d4a:	1891      	adds	r1, r2, r2
 8003d4c:	6239      	str	r1, [r7, #32]
 8003d4e:	415b      	adcs	r3, r3
 8003d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d56:	4641      	mov	r1, r8
 8003d58:	1854      	adds	r4, r2, r1
 8003d5a:	4649      	mov	r1, r9
 8003d5c:	eb43 0501 	adc.w	r5, r3, r1
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	f04f 0300 	mov.w	r3, #0
 8003d68:	00eb      	lsls	r3, r5, #3
 8003d6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d6e:	00e2      	lsls	r2, r4, #3
 8003d70:	4614      	mov	r4, r2
 8003d72:	461d      	mov	r5, r3
 8003d74:	4643      	mov	r3, r8
 8003d76:	18e3      	adds	r3, r4, r3
 8003d78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d7c:	464b      	mov	r3, r9
 8003d7e:	eb45 0303 	adc.w	r3, r5, r3
 8003d82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d96:	f04f 0200 	mov.w	r2, #0
 8003d9a:	f04f 0300 	mov.w	r3, #0
 8003d9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003da2:	4629      	mov	r1, r5
 8003da4:	008b      	lsls	r3, r1, #2
 8003da6:	4621      	mov	r1, r4
 8003da8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dac:	4621      	mov	r1, r4
 8003dae:	008a      	lsls	r2, r1, #2
 8003db0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003db4:	f7fc fa20 	bl	80001f8 <__aeabi_uldivmod>
 8003db8:	4602      	mov	r2, r0
 8003dba:	460b      	mov	r3, r1
 8003dbc:	4b60      	ldr	r3, [pc, #384]	@ (8003f40 <UART_SetConfig+0x4e4>)
 8003dbe:	fba3 2302 	umull	r2, r3, r3, r2
 8003dc2:	095b      	lsrs	r3, r3, #5
 8003dc4:	011c      	lsls	r4, r3, #4
 8003dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003dd0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003dd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003dd8:	4642      	mov	r2, r8
 8003dda:	464b      	mov	r3, r9
 8003ddc:	1891      	adds	r1, r2, r2
 8003dde:	61b9      	str	r1, [r7, #24]
 8003de0:	415b      	adcs	r3, r3
 8003de2:	61fb      	str	r3, [r7, #28]
 8003de4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003de8:	4641      	mov	r1, r8
 8003dea:	1851      	adds	r1, r2, r1
 8003dec:	6139      	str	r1, [r7, #16]
 8003dee:	4649      	mov	r1, r9
 8003df0:	414b      	adcs	r3, r1
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	f04f 0300 	mov.w	r3, #0
 8003dfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e00:	4659      	mov	r1, fp
 8003e02:	00cb      	lsls	r3, r1, #3
 8003e04:	4651      	mov	r1, sl
 8003e06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e0a:	4651      	mov	r1, sl
 8003e0c:	00ca      	lsls	r2, r1, #3
 8003e0e:	4610      	mov	r0, r2
 8003e10:	4619      	mov	r1, r3
 8003e12:	4603      	mov	r3, r0
 8003e14:	4642      	mov	r2, r8
 8003e16:	189b      	adds	r3, r3, r2
 8003e18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e1c:	464b      	mov	r3, r9
 8003e1e:	460a      	mov	r2, r1
 8003e20:	eb42 0303 	adc.w	r3, r2, r3
 8003e24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e32:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	f04f 0300 	mov.w	r3, #0
 8003e3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003e40:	4649      	mov	r1, r9
 8003e42:	008b      	lsls	r3, r1, #2
 8003e44:	4641      	mov	r1, r8
 8003e46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e4a:	4641      	mov	r1, r8
 8003e4c:	008a      	lsls	r2, r1, #2
 8003e4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003e52:	f7fc f9d1 	bl	80001f8 <__aeabi_uldivmod>
 8003e56:	4602      	mov	r2, r0
 8003e58:	460b      	mov	r3, r1
 8003e5a:	4611      	mov	r1, r2
 8003e5c:	4b38      	ldr	r3, [pc, #224]	@ (8003f40 <UART_SetConfig+0x4e4>)
 8003e5e:	fba3 2301 	umull	r2, r3, r3, r1
 8003e62:	095b      	lsrs	r3, r3, #5
 8003e64:	2264      	movs	r2, #100	@ 0x64
 8003e66:	fb02 f303 	mul.w	r3, r2, r3
 8003e6a:	1acb      	subs	r3, r1, r3
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	3332      	adds	r3, #50	@ 0x32
 8003e70:	4a33      	ldr	r2, [pc, #204]	@ (8003f40 <UART_SetConfig+0x4e4>)
 8003e72:	fba2 2303 	umull	r2, r3, r2, r3
 8003e76:	095b      	lsrs	r3, r3, #5
 8003e78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e7c:	441c      	add	r4, r3
 8003e7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e82:	2200      	movs	r2, #0
 8003e84:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e86:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003e8c:	4642      	mov	r2, r8
 8003e8e:	464b      	mov	r3, r9
 8003e90:	1891      	adds	r1, r2, r2
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	415b      	adcs	r3, r3
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e9c:	4641      	mov	r1, r8
 8003e9e:	1851      	adds	r1, r2, r1
 8003ea0:	6039      	str	r1, [r7, #0]
 8003ea2:	4649      	mov	r1, r9
 8003ea4:	414b      	adcs	r3, r1
 8003ea6:	607b      	str	r3, [r7, #4]
 8003ea8:	f04f 0200 	mov.w	r2, #0
 8003eac:	f04f 0300 	mov.w	r3, #0
 8003eb0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003eb4:	4659      	mov	r1, fp
 8003eb6:	00cb      	lsls	r3, r1, #3
 8003eb8:	4651      	mov	r1, sl
 8003eba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ebe:	4651      	mov	r1, sl
 8003ec0:	00ca      	lsls	r2, r1, #3
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	4642      	mov	r2, r8
 8003eca:	189b      	adds	r3, r3, r2
 8003ecc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ece:	464b      	mov	r3, r9
 8003ed0:	460a      	mov	r2, r1
 8003ed2:	eb42 0303 	adc.w	r3, r2, r3
 8003ed6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ee2:	667a      	str	r2, [r7, #100]	@ 0x64
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003ef0:	4649      	mov	r1, r9
 8003ef2:	008b      	lsls	r3, r1, #2
 8003ef4:	4641      	mov	r1, r8
 8003ef6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003efa:	4641      	mov	r1, r8
 8003efc:	008a      	lsls	r2, r1, #2
 8003efe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003f02:	f7fc f979 	bl	80001f8 <__aeabi_uldivmod>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f40 <UART_SetConfig+0x4e4>)
 8003f0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	2164      	movs	r1, #100	@ 0x64
 8003f14:	fb01 f303 	mul.w	r3, r1, r3
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	3332      	adds	r3, #50	@ 0x32
 8003f1e:	4a08      	ldr	r2, [pc, #32]	@ (8003f40 <UART_SetConfig+0x4e4>)
 8003f20:	fba2 2303 	umull	r2, r3, r2, r3
 8003f24:	095b      	lsrs	r3, r3, #5
 8003f26:	f003 020f 	and.w	r2, r3, #15
 8003f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4422      	add	r2, r4
 8003f32:	609a      	str	r2, [r3, #8]
}
 8003f34:	bf00      	nop
 8003f36:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f40:	51eb851f 	.word	0x51eb851f

08003f44 <memset>:
 8003f44:	4402      	add	r2, r0
 8003f46:	4603      	mov	r3, r0
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d100      	bne.n	8003f4e <memset+0xa>
 8003f4c:	4770      	bx	lr
 8003f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f52:	e7f9      	b.n	8003f48 <memset+0x4>

08003f54 <__libc_init_array>:
 8003f54:	b570      	push	{r4, r5, r6, lr}
 8003f56:	4d0d      	ldr	r5, [pc, #52]	@ (8003f8c <__libc_init_array+0x38>)
 8003f58:	4c0d      	ldr	r4, [pc, #52]	@ (8003f90 <__libc_init_array+0x3c>)
 8003f5a:	1b64      	subs	r4, r4, r5
 8003f5c:	10a4      	asrs	r4, r4, #2
 8003f5e:	2600      	movs	r6, #0
 8003f60:	42a6      	cmp	r6, r4
 8003f62:	d109      	bne.n	8003f78 <__libc_init_array+0x24>
 8003f64:	4d0b      	ldr	r5, [pc, #44]	@ (8003f94 <__libc_init_array+0x40>)
 8003f66:	4c0c      	ldr	r4, [pc, #48]	@ (8003f98 <__libc_init_array+0x44>)
 8003f68:	f000 f818 	bl	8003f9c <_init>
 8003f6c:	1b64      	subs	r4, r4, r5
 8003f6e:	10a4      	asrs	r4, r4, #2
 8003f70:	2600      	movs	r6, #0
 8003f72:	42a6      	cmp	r6, r4
 8003f74:	d105      	bne.n	8003f82 <__libc_init_array+0x2e>
 8003f76:	bd70      	pop	{r4, r5, r6, pc}
 8003f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f7c:	4798      	blx	r3
 8003f7e:	3601      	adds	r6, #1
 8003f80:	e7ee      	b.n	8003f60 <__libc_init_array+0xc>
 8003f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f86:	4798      	blx	r3
 8003f88:	3601      	adds	r6, #1
 8003f8a:	e7f2      	b.n	8003f72 <__libc_init_array+0x1e>
 8003f8c:	080041d0 	.word	0x080041d0
 8003f90:	080041d0 	.word	0x080041d0
 8003f94:	080041d0 	.word	0x080041d0
 8003f98:	080041d4 	.word	0x080041d4

08003f9c <_init>:
 8003f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9e:	bf00      	nop
 8003fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fa2:	bc08      	pop	{r3}
 8003fa4:	469e      	mov	lr, r3
 8003fa6:	4770      	bx	lr

08003fa8 <_fini>:
 8003fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003faa:	bf00      	nop
 8003fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fae:	bc08      	pop	{r3}
 8003fb0:	469e      	mov	lr, r3
 8003fb2:	4770      	bx	lr
